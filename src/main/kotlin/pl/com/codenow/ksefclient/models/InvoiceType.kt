/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package pl.com.codenow.ksefclient.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * | Wartość | Opis | | --- | --- | | Vat | (FA) Podstawowa | | Zal | (FA) Zaliczkowa | | Kor | (FA) Korygująca | | Roz | (FA) Rozliczeniowa | | Upr | (FA) Uproszczona | | KorZal | (FA) Korygująca fakturę zaliczkową | | KorRoz | (FA) Korygująca fakturę rozliczeniową | | VatPef | (PEF) Podstawowowa | | VatPefSp | (PEF) Specjalizowana | | KorPef | (PEF) Korygująca | | VatRr | (RR) Podstawowa | | KorVatRr | (RR) Korygująca | 
 *
 * Values: Vat,Zal,Kor,Roz,Upr,KorZal,KorRoz,VatPef,VatPefSp,KorPef,VatRr,KorVatRr
 */

@JsonClass(generateAdapter = false)
enum class InvoiceType(val value: kotlin.String) {

    @Json(name = "Vat")
    Vat("Vat"),

    @Json(name = "Zal")
    Zal("Zal"),

    @Json(name = "Kor")
    Kor("Kor"),

    @Json(name = "Roz")
    Roz("Roz"),

    @Json(name = "Upr")
    Upr("Upr"),

    @Json(name = "KorZal")
    KorZal("KorZal"),

    @Json(name = "KorRoz")
    KorRoz("KorRoz"),

    @Json(name = "VatPef")
    VatPef("VatPef"),

    @Json(name = "VatPefSp")
    VatPefSp("VatPefSp"),

    @Json(name = "KorPef")
    KorPef("KorPef"),

    @Json(name = "VatRr")
    VatRr("VatRr"),

    @Json(name = "KorVatRr")
    KorVatRr("KorVatRr");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is InvoiceType) "$data" else null

        /**
         * Returns a valid [InvoiceType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): InvoiceType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

