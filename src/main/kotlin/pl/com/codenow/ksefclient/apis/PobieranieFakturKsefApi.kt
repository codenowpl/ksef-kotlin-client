/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package pl.com.codenow.ksefclient.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import pl.com.codenow.ksefclient.models.ExceptionResponse
import pl.com.codenow.ksefclient.models.ExportInvoicesResponse
import pl.com.codenow.ksefclient.models.InvoiceExportRequest
import pl.com.codenow.ksefclient.models.InvoiceExportStatusResponse
import pl.com.codenow.ksefclient.models.InvoiceQueryFilters
import pl.com.codenow.ksefclient.models.QueryInvoicesMetadataResponse

import com.squareup.moshi.Json

import pl.com.codenow.ksefclient.infrastructure.ApiClient
import pl.com.codenow.ksefclient.infrastructure.ApiResponse
import pl.com.codenow.ksefclient.infrastructure.ClientException
import pl.com.codenow.ksefclient.infrastructure.ClientError
import pl.com.codenow.ksefclient.infrastructure.ServerException
import pl.com.codenow.ksefclient.infrastructure.ServerError
import pl.com.codenow.ksefclient.infrastructure.MultiValueMap
import pl.com.codenow.ksefclient.infrastructure.PartConfig
import pl.com.codenow.ksefclient.infrastructure.RequestConfig
import pl.com.codenow.ksefclient.infrastructure.RequestMethod
import pl.com.codenow.ksefclient.infrastructure.ResponseType
import pl.com.codenow.ksefclient.infrastructure.Success
import pl.com.codenow.ksefclient.infrastructure.toMultiValue

class PobieranieFakturKsefApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Pobranie statusu eksportu paczki faktur
     *   Wymagane uprawnienia: &#x60;InvoiceRead&#x60;.
     * @param operationReferenceNumber Numer referencyjny operacji.
     * @return InvoiceExportStatusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2InvoicesExportsOperationReferenceNumberGet(operationReferenceNumber: kotlin.String) : InvoiceExportStatusResponse {
        val localVarResponse = apiV2InvoicesExportsOperationReferenceNumberGetWithHttpInfo(operationReferenceNumber = operationReferenceNumber)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InvoiceExportStatusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie statusu eksportu paczki faktur
     *   Wymagane uprawnienia: &#x60;InvoiceRead&#x60;.
     * @param operationReferenceNumber Numer referencyjny operacji.
     * @return ApiResponse<InvoiceExportStatusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2InvoicesExportsOperationReferenceNumberGetWithHttpInfo(operationReferenceNumber: kotlin.String) : ApiResponse<InvoiceExportStatusResponse?> {
        val localVariableConfig = apiV2InvoicesExportsOperationReferenceNumberGetRequestConfig(operationReferenceNumber = operationReferenceNumber)

        return request<Unit, InvoiceExportStatusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2InvoicesExportsOperationReferenceNumberGet
     *
     * @param operationReferenceNumber Numer referencyjny operacji.
     * @return RequestConfig
     */
    fun apiV2InvoicesExportsOperationReferenceNumberGetRequestConfig(operationReferenceNumber: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/invoices/exports/{operationReferenceNumber}".replace("{"+"operationReferenceNumber"+"}", encodeURIComponent(operationReferenceNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Eksport paczki faktur
     * Rozpoczyna asynchroniczny proces wyszukiwania faktur w systemie KSeF na podstawie przekazanych filtrów oraz przygotowania ich w formie zaszyfrowanej paczki. Wymagane jest przekazanie informacji o szyfrowaniu w polu &#x60;Encryption&#x60;, które służą do zabezpieczenia przygotowanej paczki z fakturami.  Wymagane uprawnienia: &#x60;InvoiceRead&#x60;.
     * @param invoiceExportRequest Dane wejściowe określające kryteria i format eksportu paczki faktur. (optional)
     * @return ExportInvoicesResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2InvoicesExportsPost(invoiceExportRequest: InvoiceExportRequest? = null) : ExportInvoicesResponse {
        val localVarResponse = apiV2InvoicesExportsPostWithHttpInfo(invoiceExportRequest = invoiceExportRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ExportInvoicesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Eksport paczki faktur
     * Rozpoczyna asynchroniczny proces wyszukiwania faktur w systemie KSeF na podstawie przekazanych filtrów oraz przygotowania ich w formie zaszyfrowanej paczki. Wymagane jest przekazanie informacji o szyfrowaniu w polu &#x60;Encryption&#x60;, które służą do zabezpieczenia przygotowanej paczki z fakturami.  Wymagane uprawnienia: &#x60;InvoiceRead&#x60;.
     * @param invoiceExportRequest Dane wejściowe określające kryteria i format eksportu paczki faktur. (optional)
     * @return ApiResponse<ExportInvoicesResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2InvoicesExportsPostWithHttpInfo(invoiceExportRequest: InvoiceExportRequest?) : ApiResponse<ExportInvoicesResponse?> {
        val localVariableConfig = apiV2InvoicesExportsPostRequestConfig(invoiceExportRequest = invoiceExportRequest)

        return request<InvoiceExportRequest, ExportInvoicesResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2InvoicesExportsPost
     *
     * @param invoiceExportRequest Dane wejściowe określające kryteria i format eksportu paczki faktur. (optional)
     * @return RequestConfig
     */
    fun apiV2InvoicesExportsPostRequestConfig(invoiceExportRequest: InvoiceExportRequest?) : RequestConfig<InvoiceExportRequest> {
        val localVariableBody = invoiceExportRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/invoices/exports",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Pobranie faktury po numerze KSeF
     * Zwraca fakturę o podanym numerze KSeF.  Wymagane uprawnienia: &#x60;InvoiceRead&#x60;.
     * @param ksefNumber Numer KSeF faktury.
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2InvoicesKsefKsefNumberGet(ksefNumber: kotlin.String) : kotlin.String {
        val localVarResponse = apiV2InvoicesKsefKsefNumberGetWithHttpInfo(ksefNumber = ksefNumber)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie faktury po numerze KSeF
     * Zwraca fakturę o podanym numerze KSeF.  Wymagane uprawnienia: &#x60;InvoiceRead&#x60;.
     * @param ksefNumber Numer KSeF faktury.
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2InvoicesKsefKsefNumberGetWithHttpInfo(ksefNumber: kotlin.String) : ApiResponse<kotlin.String?> {
        val localVariableConfig = apiV2InvoicesKsefKsefNumberGetRequestConfig(ksefNumber = ksefNumber)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2InvoicesKsefKsefNumberGet
     *
     * @param ksefNumber Numer KSeF faktury.
     * @return RequestConfig
     */
    fun apiV2InvoicesKsefKsefNumberGetRequestConfig(ksefNumber: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/invoices/ksef/{ksefNumber}".replace("{"+"ksefNumber"+"}", encodeURIComponent(ksefNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Pobranie listy metadanych faktur
     * Zwraca listę metadanych faktur spełniające podane kryteria wyszukiwania. Wyniki sortowane są rosnąco według typu daty przekazanej w &#x60;DateRange&#x60;. Do realizacji pobierania przyrostowego należy stosować typ &#x60;PermanentStorage&#x60;. Maksymalnie można pobrać faktury w zakresie do 10 000 rekordów  Wymagane uprawnienia: &#x60;InvoiceRead&#x60;.
     * @param pageOffset Indeks pierwszej strony wyników (0 &#x3D; pierwsza strona). (optional, default to 0)
     * @param pageSize Rozmiar strony wyników. Wartość musi zawierać się w przedziale od 10 do 250. (optional, default to 10)
     * @param invoiceQueryFilters Zestaw filtrów dla wyszukiwania metadanych. (optional)
     * @return QueryInvoicesMetadataResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2InvoicesQueryMetadataPost(pageOffset: kotlin.Int? = 0, pageSize: kotlin.Int? = 10, invoiceQueryFilters: InvoiceQueryFilters? = null) : QueryInvoicesMetadataResponse {
        val localVarResponse = apiV2InvoicesQueryMetadataPostWithHttpInfo(pageOffset = pageOffset, pageSize = pageSize, invoiceQueryFilters = invoiceQueryFilters)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QueryInvoicesMetadataResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie listy metadanych faktur
     * Zwraca listę metadanych faktur spełniające podane kryteria wyszukiwania. Wyniki sortowane są rosnąco według typu daty przekazanej w &#x60;DateRange&#x60;. Do realizacji pobierania przyrostowego należy stosować typ &#x60;PermanentStorage&#x60;. Maksymalnie można pobrać faktury w zakresie do 10 000 rekordów  Wymagane uprawnienia: &#x60;InvoiceRead&#x60;.
     * @param pageOffset Indeks pierwszej strony wyników (0 &#x3D; pierwsza strona). (optional, default to 0)
     * @param pageSize Rozmiar strony wyników. Wartość musi zawierać się w przedziale od 10 do 250. (optional, default to 10)
     * @param invoiceQueryFilters Zestaw filtrów dla wyszukiwania metadanych. (optional)
     * @return ApiResponse<QueryInvoicesMetadataResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2InvoicesQueryMetadataPostWithHttpInfo(pageOffset: kotlin.Int?, pageSize: kotlin.Int?, invoiceQueryFilters: InvoiceQueryFilters?) : ApiResponse<QueryInvoicesMetadataResponse?> {
        val localVariableConfig = apiV2InvoicesQueryMetadataPostRequestConfig(pageOffset = pageOffset, pageSize = pageSize, invoiceQueryFilters = invoiceQueryFilters)

        return request<InvoiceQueryFilters, QueryInvoicesMetadataResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2InvoicesQueryMetadataPost
     *
     * @param pageOffset Indeks pierwszej strony wyników (0 &#x3D; pierwsza strona). (optional, default to 0)
     * @param pageSize Rozmiar strony wyników. Wartość musi zawierać się w przedziale od 10 do 250. (optional, default to 10)
     * @param invoiceQueryFilters Zestaw filtrów dla wyszukiwania metadanych. (optional)
     * @return RequestConfig
     */
    fun apiV2InvoicesQueryMetadataPostRequestConfig(pageOffset: kotlin.Int?, pageSize: kotlin.Int?, invoiceQueryFilters: InvoiceQueryFilters?) : RequestConfig<InvoiceQueryFilters> {
        val localVariableBody = invoiceQueryFilters
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (pageOffset != null) {
                    put("pageOffset", listOf(pageOffset.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/invoices/query/metadata",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
