/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package pl.com.codenow.ksefclient.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import pl.com.codenow.ksefclient.models.ExceptionResponse
import pl.com.codenow.ksefclient.models.OpenOnlineSessionRequest
import pl.com.codenow.ksefclient.models.OpenOnlineSessionResponse
import pl.com.codenow.ksefclient.models.SendInvoiceRequest
import pl.com.codenow.ksefclient.models.SendInvoiceResponse

import com.squareup.moshi.Json

import pl.com.codenow.ksefclient.infrastructure.ApiClient
import pl.com.codenow.ksefclient.infrastructure.ApiResponse
import pl.com.codenow.ksefclient.infrastructure.ClientException
import pl.com.codenow.ksefclient.infrastructure.ClientError
import pl.com.codenow.ksefclient.infrastructure.ServerException
import pl.com.codenow.ksefclient.infrastructure.ServerError
import pl.com.codenow.ksefclient.infrastructure.MultiValueMap
import pl.com.codenow.ksefclient.infrastructure.PartConfig
import pl.com.codenow.ksefclient.infrastructure.RequestConfig
import pl.com.codenow.ksefclient.infrastructure.RequestMethod
import pl.com.codenow.ksefclient.infrastructure.ResponseType
import pl.com.codenow.ksefclient.infrastructure.Success
import pl.com.codenow.ksefclient.infrastructure.toMultiValue

class WysykaInteraktywnaKsefApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Zamknięcie sesji interaktywnej
     * Zamyka sesję interaktywną i rozpoczyna generowanie zbiorczego UPO dla sesji.  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2SessionsOnlineReferenceNumberClosePost(referenceNumber: kotlin.String) : Unit {
        val localVarResponse = apiV2SessionsOnlineReferenceNumberClosePostWithHttpInfo(referenceNumber = referenceNumber)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Zamknięcie sesji interaktywnej
     * Zamyka sesję interaktywną i rozpoczyna generowanie zbiorczego UPO dla sesji.  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2SessionsOnlineReferenceNumberClosePostWithHttpInfo(referenceNumber: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = apiV2SessionsOnlineReferenceNumberClosePostRequestConfig(referenceNumber = referenceNumber)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2SessionsOnlineReferenceNumberClosePost
     *
     * @param referenceNumber Numer referencyjny sesji
     * @return RequestConfig
     */
    fun apiV2SessionsOnlineReferenceNumberClosePostRequestConfig(referenceNumber: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/sessions/online/{referenceNumber}/close".replace("{"+"referenceNumber"+"}", encodeURIComponent(referenceNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Wysłanie faktury
     * Przyjmuje zaszyfrowaną fakturę oraz jej metadane i rozpoczyna jej przetwarzanie.  &gt; Więcej informacji: &gt; - [Wysłanie faktury](https://github.com/CIRFMF/ksef-docs/blob/main/sesja-interaktywna.md#2-wys%C5%82anie-faktury)  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji
     * @param sendInvoiceRequest Dane faktury (optional)
     * @return SendInvoiceResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2SessionsOnlineReferenceNumberInvoicesPost(referenceNumber: kotlin.String, sendInvoiceRequest: SendInvoiceRequest? = null) : SendInvoiceResponse {
        val localVarResponse = apiV2SessionsOnlineReferenceNumberInvoicesPostWithHttpInfo(referenceNumber = referenceNumber, sendInvoiceRequest = sendInvoiceRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SendInvoiceResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Wysłanie faktury
     * Przyjmuje zaszyfrowaną fakturę oraz jej metadane i rozpoczyna jej przetwarzanie.  &gt; Więcej informacji: &gt; - [Wysłanie faktury](https://github.com/CIRFMF/ksef-docs/blob/main/sesja-interaktywna.md#2-wys%C5%82anie-faktury)  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji
     * @param sendInvoiceRequest Dane faktury (optional)
     * @return ApiResponse<SendInvoiceResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2SessionsOnlineReferenceNumberInvoicesPostWithHttpInfo(referenceNumber: kotlin.String, sendInvoiceRequest: SendInvoiceRequest?) : ApiResponse<SendInvoiceResponse?> {
        val localVariableConfig = apiV2SessionsOnlineReferenceNumberInvoicesPostRequestConfig(referenceNumber = referenceNumber, sendInvoiceRequest = sendInvoiceRequest)

        return request<SendInvoiceRequest, SendInvoiceResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2SessionsOnlineReferenceNumberInvoicesPost
     *
     * @param referenceNumber Numer referencyjny sesji
     * @param sendInvoiceRequest Dane faktury (optional)
     * @return RequestConfig
     */
    fun apiV2SessionsOnlineReferenceNumberInvoicesPostRequestConfig(referenceNumber: kotlin.String, sendInvoiceRequest: SendInvoiceRequest?) : RequestConfig<SendInvoiceRequest> {
        val localVariableBody = sendInvoiceRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/sessions/online/{referenceNumber}/invoices".replace("{"+"referenceNumber"+"}", encodeURIComponent(referenceNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Otwarcie sesji interaktywnej
     * Otwiera sesję do wysyłki pojedynczych faktur. Należy przekazać schemat wysyłanych faktur oraz informacje o kluczu używanym do szyfrowania.  &gt; Więcej informacji: &gt; - [Otwarcie sesji interaktywnej](https://github.com/CIRFMF/ksef-docs/blob/main/sesja-interaktywna.md#1-otwarcie-sesji) &gt; - [Klucz publiczny Ministersta Finansów](/docs/v2/index.html#tag/Certyfikaty-klucza-publicznego)  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param openOnlineSessionRequest  (optional)
     * @return OpenOnlineSessionResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun onlineSessionOpen(openOnlineSessionRequest: OpenOnlineSessionRequest? = null) : OpenOnlineSessionResponse {
        val localVarResponse = onlineSessionOpenWithHttpInfo(openOnlineSessionRequest = openOnlineSessionRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OpenOnlineSessionResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Otwarcie sesji interaktywnej
     * Otwiera sesję do wysyłki pojedynczych faktur. Należy przekazać schemat wysyłanych faktur oraz informacje o kluczu używanym do szyfrowania.  &gt; Więcej informacji: &gt; - [Otwarcie sesji interaktywnej](https://github.com/CIRFMF/ksef-docs/blob/main/sesja-interaktywna.md#1-otwarcie-sesji) &gt; - [Klucz publiczny Ministersta Finansów](/docs/v2/index.html#tag/Certyfikaty-klucza-publicznego)  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param openOnlineSessionRequest  (optional)
     * @return ApiResponse<OpenOnlineSessionResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun onlineSessionOpenWithHttpInfo(openOnlineSessionRequest: OpenOnlineSessionRequest?) : ApiResponse<OpenOnlineSessionResponse?> {
        val localVariableConfig = onlineSessionOpenRequestConfig(openOnlineSessionRequest = openOnlineSessionRequest)

        return request<OpenOnlineSessionRequest, OpenOnlineSessionResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation onlineSessionOpen
     *
     * @param openOnlineSessionRequest  (optional)
     * @return RequestConfig
     */
    fun onlineSessionOpenRequestConfig(openOnlineSessionRequest: OpenOnlineSessionRequest?) : RequestConfig<OpenOnlineSessionRequest> {
        val localVariableBody = openOnlineSessionRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/sessions/online",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
