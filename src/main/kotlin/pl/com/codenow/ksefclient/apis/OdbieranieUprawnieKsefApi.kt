/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package pl.com.codenow.ksefclient.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import pl.com.codenow.ksefclient.models.ExceptionResponse
import pl.com.codenow.ksefclient.models.PermissionsOperationResponse

import com.squareup.moshi.Json

import pl.com.codenow.ksefclient.infrastructure.ApiClient
import pl.com.codenow.ksefclient.infrastructure.ApiResponse
import pl.com.codenow.ksefclient.infrastructure.ClientException
import pl.com.codenow.ksefclient.infrastructure.ClientError
import pl.com.codenow.ksefclient.infrastructure.ServerException
import pl.com.codenow.ksefclient.infrastructure.ServerError
import pl.com.codenow.ksefclient.infrastructure.MultiValueMap
import pl.com.codenow.ksefclient.infrastructure.PartConfig
import pl.com.codenow.ksefclient.infrastructure.RequestConfig
import pl.com.codenow.ksefclient.infrastructure.RequestMethod
import pl.com.codenow.ksefclient.infrastructure.ResponseType
import pl.com.codenow.ksefclient.infrastructure.Success
import pl.com.codenow.ksefclient.infrastructure.toMultiValue

class OdbieranieUprawnieKsefApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Odebranie uprawnień podmiotowych
     * Rozpoczyna asynchroniczną operacje odbierania uprawnienia o podanym identyfikatorze. Ta metoda służy do odbierania uprawnień podmiotowych.  &gt; Więcej informacji: &gt; - [Odbieranie uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#odebranie-uprawnie%C5%84-podmiotowych)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;.
     * @param permissionId Id uprawnienia.
     * @return PermissionsOperationResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2PermissionsAuthorizationsGrantsPermissionIdDelete(permissionId: kotlin.String) : PermissionsOperationResponse {
        val localVarResponse = apiV2PermissionsAuthorizationsGrantsPermissionIdDeleteWithHttpInfo(permissionId = permissionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PermissionsOperationResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Odebranie uprawnień podmiotowych
     * Rozpoczyna asynchroniczną operacje odbierania uprawnienia o podanym identyfikatorze. Ta metoda służy do odbierania uprawnień podmiotowych.  &gt; Więcej informacji: &gt; - [Odbieranie uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#odebranie-uprawnie%C5%84-podmiotowych)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;.
     * @param permissionId Id uprawnienia.
     * @return ApiResponse<PermissionsOperationResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2PermissionsAuthorizationsGrantsPermissionIdDeleteWithHttpInfo(permissionId: kotlin.String) : ApiResponse<PermissionsOperationResponse?> {
        val localVariableConfig = apiV2PermissionsAuthorizationsGrantsPermissionIdDeleteRequestConfig(permissionId = permissionId)

        return request<Unit, PermissionsOperationResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2PermissionsAuthorizationsGrantsPermissionIdDelete
     *
     * @param permissionId Id uprawnienia.
     * @return RequestConfig
     */
    fun apiV2PermissionsAuthorizationsGrantsPermissionIdDeleteRequestConfig(permissionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/permissions/authorizations/grants/{permissionId}".replace("{"+"permissionId"+"}", encodeURIComponent(permissionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Odebranie uprawnień
     * Rozpoczyna asynchroniczną operacje odbierania uprawnienia o podanym identyfikatorze.  Ta metoda służy do odbierania uprawnień takich jak: - nadanych nadanych osobom fizycznym lub podmiotom do pracy w KSeF - nadanych podmiotom do obsługi faktur - nadanych w sposób pośredni - administratorów jednostek i podmiotów podrzędnych - administratorów podmiotów unijnych uprawnionych do samofakturowania - reprezentantów podmiotów unijnych  &gt; Więcej informacji: &gt; - [Odbieranie uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#odebranie-uprawnie%C5%84)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;, &#x60;VatUeManage&#x60;, &#x60;SubunitManage&#x60;.
     * @param permissionId Id uprawnienia.
     * @return PermissionsOperationResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2PermissionsCommonGrantsPermissionIdDelete(permissionId: kotlin.String) : PermissionsOperationResponse {
        val localVarResponse = apiV2PermissionsCommonGrantsPermissionIdDeleteWithHttpInfo(permissionId = permissionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PermissionsOperationResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Odebranie uprawnień
     * Rozpoczyna asynchroniczną operacje odbierania uprawnienia o podanym identyfikatorze.  Ta metoda służy do odbierania uprawnień takich jak: - nadanych nadanych osobom fizycznym lub podmiotom do pracy w KSeF - nadanych podmiotom do obsługi faktur - nadanych w sposób pośredni - administratorów jednostek i podmiotów podrzędnych - administratorów podmiotów unijnych uprawnionych do samofakturowania - reprezentantów podmiotów unijnych  &gt; Więcej informacji: &gt; - [Odbieranie uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#odebranie-uprawnie%C5%84)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;, &#x60;VatUeManage&#x60;, &#x60;SubunitManage&#x60;.
     * @param permissionId Id uprawnienia.
     * @return ApiResponse<PermissionsOperationResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2PermissionsCommonGrantsPermissionIdDeleteWithHttpInfo(permissionId: kotlin.String) : ApiResponse<PermissionsOperationResponse?> {
        val localVariableConfig = apiV2PermissionsCommonGrantsPermissionIdDeleteRequestConfig(permissionId = permissionId)

        return request<Unit, PermissionsOperationResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2PermissionsCommonGrantsPermissionIdDelete
     *
     * @param permissionId Id uprawnienia.
     * @return RequestConfig
     */
    fun apiV2PermissionsCommonGrantsPermissionIdDeleteRequestConfig(permissionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/permissions/common/grants/{permissionId}".replace("{"+"permissionId"+"}", encodeURIComponent(permissionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
