/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package pl.com.codenow.ksefclient.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import pl.com.codenow.ksefclient.models.CommonSessionStatus
import pl.com.codenow.ksefclient.models.ExceptionResponse
import pl.com.codenow.ksefclient.models.SessionInvoiceStatusResponse
import pl.com.codenow.ksefclient.models.SessionInvoicesResponse
import pl.com.codenow.ksefclient.models.SessionStatusResponse
import pl.com.codenow.ksefclient.models.SessionType
import pl.com.codenow.ksefclient.models.SessionsQueryResponse

import com.squareup.moshi.Json

import pl.com.codenow.ksefclient.infrastructure.ApiClient
import pl.com.codenow.ksefclient.infrastructure.ApiResponse
import pl.com.codenow.ksefclient.infrastructure.ClientException
import pl.com.codenow.ksefclient.infrastructure.ClientError
import pl.com.codenow.ksefclient.infrastructure.ServerException
import pl.com.codenow.ksefclient.infrastructure.ServerError
import pl.com.codenow.ksefclient.infrastructure.MultiValueMap
import pl.com.codenow.ksefclient.infrastructure.PartConfig
import pl.com.codenow.ksefclient.infrastructure.RequestConfig
import pl.com.codenow.ksefclient.infrastructure.RequestMethod
import pl.com.codenow.ksefclient.infrastructure.ResponseType
import pl.com.codenow.ksefclient.infrastructure.Success
import pl.com.codenow.ksefclient.infrastructure.toMultiValue

class StatusWysykiIUPOKsefApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Pobranie listy sesji
     * Zwraca listę sesji spełniających podane kryteria wyszukiwania.  Wymagane uprawnienia: - &#x60;Introspection&#x60; – pozwala pobrać wszystkie sesje w bieżącym kontekście uwierzytelnienia &#x60;(ContextIdentifier)&#x60;. - &#x60;InvoiceWrite&#x60; – pozwala pobrać wyłącznie sesje utworzone przez podmiot uwierzytelniający, czyli podmiot inicjujący uwierzytelnienie.
     * @param sessionType Typ sesji. | Wartość | Opis | | --- | --- | | Online | Wysyłka interaktywna (pojedyncze faktury). | | Batch | Wysyłka wsadowa (paczka faktur). | 
     * @param pageSize Rozmiar strony. (optional)
     * @param referenceNumber Numer referencyjny sesji. (optional)
     * @param dateCreatedFrom Data utworzenia sesji (od). (optional)
     * @param dateCreatedTo Data utworzenia sesji (do). (optional)
     * @param dateClosedFrom Data zamknięcia sesji (od). (optional)
     * @param dateClosedTo Data zamknięcia sesji (do). (optional)
     * @param dateModifiedFrom Data ostatniej aktywności (wysyłka faktury lub zmiana statusu) w ramach sesji (od). (optional)
     * @param dateModifiedTo Data ostatniej aktywności (wysyłka faktury lub zmiana statusu) w ramach sesji (do). (optional)
     * @param statuses Statusy sesji. | Wartość | Opis | | --- | --- | | InProgress | Sesja aktywna. | | Succeeded | Sesja przetworzona poprawnie.            W trakcie przetwarzania sesji nie wystąpiły żadne błędy, ale część faktur nadal mogła zostać odrzucona. | | Failed | Sesja nie przetworzona z powodu błędów.            Na etapie rozpoczynania lub kończenia sesji wystąpiły błędy, które nie pozwoliły na jej poprawne przetworzenie. | | Cancelled | Sesja anulowania.            Został przekroczony czas na wysyłkę w sesji wsadowej, lub nie przesłano żadnych faktur w sesji interaktywnej. |  (optional)
     * @param xContinuationToken Token służący do pobrania kolejnej strony wyników. (optional)
     * @return SessionsQueryResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2SessionsGet(sessionType: SessionType, pageSize: kotlin.Int? = null, referenceNumber: kotlin.String? = null, dateCreatedFrom: java.time.LocalDateTime? = null, dateCreatedTo: java.time.LocalDateTime? = null, dateClosedFrom: java.time.LocalDateTime? = null, dateClosedTo: java.time.LocalDateTime? = null, dateModifiedFrom: java.time.LocalDateTime? = null, dateModifiedTo: java.time.LocalDateTime? = null, statuses: kotlin.collections.List<CommonSessionStatus>? = null, xContinuationToken: kotlin.String? = null) : SessionsQueryResponse {
        val localVarResponse = apiV2SessionsGetWithHttpInfo(sessionType = sessionType, pageSize = pageSize, referenceNumber = referenceNumber, dateCreatedFrom = dateCreatedFrom, dateCreatedTo = dateCreatedTo, dateClosedFrom = dateClosedFrom, dateClosedTo = dateClosedTo, dateModifiedFrom = dateModifiedFrom, dateModifiedTo = dateModifiedTo, statuses = statuses, xContinuationToken = xContinuationToken)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SessionsQueryResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie listy sesji
     * Zwraca listę sesji spełniających podane kryteria wyszukiwania.  Wymagane uprawnienia: - &#x60;Introspection&#x60; – pozwala pobrać wszystkie sesje w bieżącym kontekście uwierzytelnienia &#x60;(ContextIdentifier)&#x60;. - &#x60;InvoiceWrite&#x60; – pozwala pobrać wyłącznie sesje utworzone przez podmiot uwierzytelniający, czyli podmiot inicjujący uwierzytelnienie.
     * @param sessionType Typ sesji. | Wartość | Opis | | --- | --- | | Online | Wysyłka interaktywna (pojedyncze faktury). | | Batch | Wysyłka wsadowa (paczka faktur). | 
     * @param pageSize Rozmiar strony. (optional)
     * @param referenceNumber Numer referencyjny sesji. (optional)
     * @param dateCreatedFrom Data utworzenia sesji (od). (optional)
     * @param dateCreatedTo Data utworzenia sesji (do). (optional)
     * @param dateClosedFrom Data zamknięcia sesji (od). (optional)
     * @param dateClosedTo Data zamknięcia sesji (do). (optional)
     * @param dateModifiedFrom Data ostatniej aktywności (wysyłka faktury lub zmiana statusu) w ramach sesji (od). (optional)
     * @param dateModifiedTo Data ostatniej aktywności (wysyłka faktury lub zmiana statusu) w ramach sesji (do). (optional)
     * @param statuses Statusy sesji. | Wartość | Opis | | --- | --- | | InProgress | Sesja aktywna. | | Succeeded | Sesja przetworzona poprawnie.            W trakcie przetwarzania sesji nie wystąpiły żadne błędy, ale część faktur nadal mogła zostać odrzucona. | | Failed | Sesja nie przetworzona z powodu błędów.            Na etapie rozpoczynania lub kończenia sesji wystąpiły błędy, które nie pozwoliły na jej poprawne przetworzenie. | | Cancelled | Sesja anulowania.            Został przekroczony czas na wysyłkę w sesji wsadowej, lub nie przesłano żadnych faktur w sesji interaktywnej. |  (optional)
     * @param xContinuationToken Token służący do pobrania kolejnej strony wyników. (optional)
     * @return ApiResponse<SessionsQueryResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2SessionsGetWithHttpInfo(sessionType: SessionType, pageSize: kotlin.Int?, referenceNumber: kotlin.String?, dateCreatedFrom: java.time.LocalDateTime?, dateCreatedTo: java.time.LocalDateTime?, dateClosedFrom: java.time.LocalDateTime?, dateClosedTo: java.time.LocalDateTime?, dateModifiedFrom: java.time.LocalDateTime?, dateModifiedTo: java.time.LocalDateTime?, statuses: kotlin.collections.List<CommonSessionStatus>?, xContinuationToken: kotlin.String?) : ApiResponse<SessionsQueryResponse?> {
        val localVariableConfig = apiV2SessionsGetRequestConfig(sessionType = sessionType, pageSize = pageSize, referenceNumber = referenceNumber, dateCreatedFrom = dateCreatedFrom, dateCreatedTo = dateCreatedTo, dateClosedFrom = dateClosedFrom, dateClosedTo = dateClosedTo, dateModifiedFrom = dateModifiedFrom, dateModifiedTo = dateModifiedTo, statuses = statuses, xContinuationToken = xContinuationToken)

        return request<Unit, SessionsQueryResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2SessionsGet
     *
     * @param sessionType Typ sesji. | Wartość | Opis | | --- | --- | | Online | Wysyłka interaktywna (pojedyncze faktury). | | Batch | Wysyłka wsadowa (paczka faktur). | 
     * @param pageSize Rozmiar strony. (optional)
     * @param referenceNumber Numer referencyjny sesji. (optional)
     * @param dateCreatedFrom Data utworzenia sesji (od). (optional)
     * @param dateCreatedTo Data utworzenia sesji (do). (optional)
     * @param dateClosedFrom Data zamknięcia sesji (od). (optional)
     * @param dateClosedTo Data zamknięcia sesji (do). (optional)
     * @param dateModifiedFrom Data ostatniej aktywności (wysyłka faktury lub zmiana statusu) w ramach sesji (od). (optional)
     * @param dateModifiedTo Data ostatniej aktywności (wysyłka faktury lub zmiana statusu) w ramach sesji (do). (optional)
     * @param statuses Statusy sesji. | Wartość | Opis | | --- | --- | | InProgress | Sesja aktywna. | | Succeeded | Sesja przetworzona poprawnie.            W trakcie przetwarzania sesji nie wystąpiły żadne błędy, ale część faktur nadal mogła zostać odrzucona. | | Failed | Sesja nie przetworzona z powodu błędów.            Na etapie rozpoczynania lub kończenia sesji wystąpiły błędy, które nie pozwoliły na jej poprawne przetworzenie. | | Cancelled | Sesja anulowania.            Został przekroczony czas na wysyłkę w sesji wsadowej, lub nie przesłano żadnych faktur w sesji interaktywnej. |  (optional)
     * @param xContinuationToken Token służący do pobrania kolejnej strony wyników. (optional)
     * @return RequestConfig
     */
    fun apiV2SessionsGetRequestConfig(sessionType: SessionType, pageSize: kotlin.Int?, referenceNumber: kotlin.String?, dateCreatedFrom: java.time.LocalDateTime?, dateCreatedTo: java.time.LocalDateTime?, dateClosedFrom: java.time.LocalDateTime?, dateClosedTo: java.time.LocalDateTime?, dateModifiedFrom: java.time.LocalDateTime?, dateModifiedTo: java.time.LocalDateTime?, statuses: kotlin.collections.List<CommonSessionStatus>?, xContinuationToken: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
                put("sessionType", listOf(sessionType.toString()))
                if (referenceNumber != null) {
                    put("referenceNumber", listOf(referenceNumber.toString()))
                }
                if (dateCreatedFrom != null) {
                    put("dateCreatedFrom", listOf(parseDateToQueryString(dateCreatedFrom)))
                }
                if (dateCreatedTo != null) {
                    put("dateCreatedTo", listOf(parseDateToQueryString(dateCreatedTo)))
                }
                if (dateClosedFrom != null) {
                    put("dateClosedFrom", listOf(parseDateToQueryString(dateClosedFrom)))
                }
                if (dateClosedTo != null) {
                    put("dateClosedTo", listOf(parseDateToQueryString(dateClosedTo)))
                }
                if (dateModifiedFrom != null) {
                    put("dateModifiedFrom", listOf(parseDateToQueryString(dateModifiedFrom)))
                }
                if (dateModifiedTo != null) {
                    put("dateModifiedTo", listOf(parseDateToQueryString(dateModifiedTo)))
                }
                if (statuses != null) {
                    put("statuses", toMultiValue(statuses.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xContinuationToken?.apply { localVariableHeaders["x-continuation-token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/sessions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Pobranie statusu sesji
     * Sprawdza bieżący status sesji o podanym numerze referencyjnym.  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;Introspection&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji.
     * @return SessionStatusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2SessionsReferenceNumberGet(referenceNumber: kotlin.String) : SessionStatusResponse {
        val localVarResponse = apiV2SessionsReferenceNumberGetWithHttpInfo(referenceNumber = referenceNumber)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SessionStatusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie statusu sesji
     * Sprawdza bieżący status sesji o podanym numerze referencyjnym.  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;Introspection&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji.
     * @return ApiResponse<SessionStatusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2SessionsReferenceNumberGetWithHttpInfo(referenceNumber: kotlin.String) : ApiResponse<SessionStatusResponse?> {
        val localVariableConfig = apiV2SessionsReferenceNumberGetRequestConfig(referenceNumber = referenceNumber)

        return request<Unit, SessionStatusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2SessionsReferenceNumberGet
     *
     * @param referenceNumber Numer referencyjny sesji.
     * @return RequestConfig
     */
    fun apiV2SessionsReferenceNumberGetRequestConfig(referenceNumber: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/sessions/{referenceNumber}".replace("{"+"referenceNumber"+"}", encodeURIComponent(referenceNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Pobranie niepoprawnie przetworzonych faktur sesji
     * Zwraca listę niepoprawnie przetworzonych faktur przesłanych w sesji wraz z ich statusami.  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;Introspection&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji.
     * @param xContinuationToken Token służący do pobrania kolejnej strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional, default to 10)
     * @return SessionInvoicesResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2SessionsReferenceNumberInvoicesFailedGet(referenceNumber: kotlin.String, xContinuationToken: kotlin.String? = null, pageSize: kotlin.Int? = 10) : SessionInvoicesResponse {
        val localVarResponse = apiV2SessionsReferenceNumberInvoicesFailedGetWithHttpInfo(referenceNumber = referenceNumber, xContinuationToken = xContinuationToken, pageSize = pageSize)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SessionInvoicesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie niepoprawnie przetworzonych faktur sesji
     * Zwraca listę niepoprawnie przetworzonych faktur przesłanych w sesji wraz z ich statusami.  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;Introspection&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji.
     * @param xContinuationToken Token służący do pobrania kolejnej strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional, default to 10)
     * @return ApiResponse<SessionInvoicesResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2SessionsReferenceNumberInvoicesFailedGetWithHttpInfo(referenceNumber: kotlin.String, xContinuationToken: kotlin.String?, pageSize: kotlin.Int?) : ApiResponse<SessionInvoicesResponse?> {
        val localVariableConfig = apiV2SessionsReferenceNumberInvoicesFailedGetRequestConfig(referenceNumber = referenceNumber, xContinuationToken = xContinuationToken, pageSize = pageSize)

        return request<Unit, SessionInvoicesResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2SessionsReferenceNumberInvoicesFailedGet
     *
     * @param referenceNumber Numer referencyjny sesji.
     * @param xContinuationToken Token służący do pobrania kolejnej strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional, default to 10)
     * @return RequestConfig
     */
    fun apiV2SessionsReferenceNumberInvoicesFailedGetRequestConfig(referenceNumber: kotlin.String, xContinuationToken: kotlin.String?, pageSize: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xContinuationToken?.apply { localVariableHeaders["x-continuation-token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/sessions/{referenceNumber}/invoices/failed".replace("{"+"referenceNumber"+"}", encodeURIComponent(referenceNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Pobranie faktur sesji
     * Zwraca listę faktur przesłanych w sesji wraz z ich statusami, oraz informacje na temat ilości poprawnie i niepoprawnie przetworzonych faktur.  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;Introspection&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji.
     * @param xContinuationToken Token służący do pobrania kolejnej strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional, default to 10)
     * @return SessionInvoicesResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2SessionsReferenceNumberInvoicesGet(referenceNumber: kotlin.String, xContinuationToken: kotlin.String? = null, pageSize: kotlin.Int? = 10) : SessionInvoicesResponse {
        val localVarResponse = apiV2SessionsReferenceNumberInvoicesGetWithHttpInfo(referenceNumber = referenceNumber, xContinuationToken = xContinuationToken, pageSize = pageSize)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SessionInvoicesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie faktur sesji
     * Zwraca listę faktur przesłanych w sesji wraz z ich statusami, oraz informacje na temat ilości poprawnie i niepoprawnie przetworzonych faktur.  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;Introspection&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji.
     * @param xContinuationToken Token służący do pobrania kolejnej strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional, default to 10)
     * @return ApiResponse<SessionInvoicesResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2SessionsReferenceNumberInvoicesGetWithHttpInfo(referenceNumber: kotlin.String, xContinuationToken: kotlin.String?, pageSize: kotlin.Int?) : ApiResponse<SessionInvoicesResponse?> {
        val localVariableConfig = apiV2SessionsReferenceNumberInvoicesGetRequestConfig(referenceNumber = referenceNumber, xContinuationToken = xContinuationToken, pageSize = pageSize)

        return request<Unit, SessionInvoicesResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2SessionsReferenceNumberInvoicesGet
     *
     * @param referenceNumber Numer referencyjny sesji.
     * @param xContinuationToken Token służący do pobrania kolejnej strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional, default to 10)
     * @return RequestConfig
     */
    fun apiV2SessionsReferenceNumberInvoicesGetRequestConfig(referenceNumber: kotlin.String, xContinuationToken: kotlin.String?, pageSize: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xContinuationToken?.apply { localVariableHeaders["x-continuation-token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/sessions/{referenceNumber}/invoices".replace("{"+"referenceNumber"+"}", encodeURIComponent(referenceNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Pobranie statusu faktury z sesji
     * Zwraca fakturę przesłaną w sesji wraz ze statusem.  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;Introspection&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji.
     * @param invoiceReferenceNumber Numer referencyjny faktury.
     * @return SessionInvoiceStatusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGet(referenceNumber: kotlin.String, invoiceReferenceNumber: kotlin.String) : SessionInvoiceStatusResponse {
        val localVarResponse = apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGetWithHttpInfo(referenceNumber = referenceNumber, invoiceReferenceNumber = invoiceReferenceNumber)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SessionInvoiceStatusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie statusu faktury z sesji
     * Zwraca fakturę przesłaną w sesji wraz ze statusem.  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;Introspection&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji.
     * @param invoiceReferenceNumber Numer referencyjny faktury.
     * @return ApiResponse<SessionInvoiceStatusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGetWithHttpInfo(referenceNumber: kotlin.String, invoiceReferenceNumber: kotlin.String) : ApiResponse<SessionInvoiceStatusResponse?> {
        val localVariableConfig = apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGetRequestConfig(referenceNumber = referenceNumber, invoiceReferenceNumber = invoiceReferenceNumber)

        return request<Unit, SessionInvoiceStatusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGet
     *
     * @param referenceNumber Numer referencyjny sesji.
     * @param invoiceReferenceNumber Numer referencyjny faktury.
     * @return RequestConfig
     */
    fun apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGetRequestConfig(referenceNumber: kotlin.String, invoiceReferenceNumber: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/sessions/{referenceNumber}/invoices/{invoiceReferenceNumber}".replace("{"+"referenceNumber"+"}", encodeURIComponent(referenceNumber.toString())).replace("{"+"invoiceReferenceNumber"+"}", encodeURIComponent(invoiceReferenceNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Pobranie UPO faktury z sesji na podstawie numeru referencyjnego faktury
     * Zwraca UPO faktury przesłanego w sesji na podstawie jego numeru KSeF.  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;Introspection&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji.
     * @param invoiceReferenceNumber Numer referencyjny faktury.
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGet(referenceNumber: kotlin.String, invoiceReferenceNumber: kotlin.String) : kotlin.String {
        val localVarResponse = apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGetWithHttpInfo(referenceNumber = referenceNumber, invoiceReferenceNumber = invoiceReferenceNumber)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie UPO faktury z sesji na podstawie numeru referencyjnego faktury
     * Zwraca UPO faktury przesłanego w sesji na podstawie jego numeru KSeF.  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;Introspection&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji.
     * @param invoiceReferenceNumber Numer referencyjny faktury.
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGetWithHttpInfo(referenceNumber: kotlin.String, invoiceReferenceNumber: kotlin.String) : ApiResponse<kotlin.String?> {
        val localVariableConfig = apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGetRequestConfig(referenceNumber = referenceNumber, invoiceReferenceNumber = invoiceReferenceNumber)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGet
     *
     * @param referenceNumber Numer referencyjny sesji.
     * @param invoiceReferenceNumber Numer referencyjny faktury.
     * @return RequestConfig
     */
    fun apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGetRequestConfig(referenceNumber: kotlin.String, invoiceReferenceNumber: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/sessions/{referenceNumber}/invoices/{invoiceReferenceNumber}/upo".replace("{"+"referenceNumber"+"}", encodeURIComponent(referenceNumber.toString())).replace("{"+"invoiceReferenceNumber"+"}", encodeURIComponent(invoiceReferenceNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Pobranie UPO faktury z sesji na podstawie numeru KSeF
     * Zwraca UPO faktury przesłanego w sesji na podstawie jego numeru KSeF.  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;Introspection&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji.
     * @param ksefNumber Numer KSeF faktury.
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGet(referenceNumber: kotlin.String, ksefNumber: kotlin.String) : kotlin.String {
        val localVarResponse = apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGetWithHttpInfo(referenceNumber = referenceNumber, ksefNumber = ksefNumber)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie UPO faktury z sesji na podstawie numeru KSeF
     * Zwraca UPO faktury przesłanego w sesji na podstawie jego numeru KSeF.  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;Introspection&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji.
     * @param ksefNumber Numer KSeF faktury.
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGetWithHttpInfo(referenceNumber: kotlin.String, ksefNumber: kotlin.String) : ApiResponse<kotlin.String?> {
        val localVariableConfig = apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGetRequestConfig(referenceNumber = referenceNumber, ksefNumber = ksefNumber)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGet
     *
     * @param referenceNumber Numer referencyjny sesji.
     * @param ksefNumber Numer KSeF faktury.
     * @return RequestConfig
     */
    fun apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGetRequestConfig(referenceNumber: kotlin.String, ksefNumber: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/sessions/{referenceNumber}/invoices/ksef/{ksefNumber}/upo".replace("{"+"referenceNumber"+"}", encodeURIComponent(referenceNumber.toString())).replace("{"+"ksefNumber"+"}", encodeURIComponent(ksefNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Pobranie UPO dla sesji
     * Zwraca XML zawierający zbiorcze UPO dla sesji.  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;Introspection&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji.
     * @param upoReferenceNumber Numer referencyjny UPO.
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2SessionsReferenceNumberUpoUpoReferenceNumberGet(referenceNumber: kotlin.String, upoReferenceNumber: kotlin.String) : kotlin.String {
        val localVarResponse = apiV2SessionsReferenceNumberUpoUpoReferenceNumberGetWithHttpInfo(referenceNumber = referenceNumber, upoReferenceNumber = upoReferenceNumber)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie UPO dla sesji
     * Zwraca XML zawierający zbiorcze UPO dla sesji.  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;, &#x60;Introspection&#x60;, &#x60;PefInvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji.
     * @param upoReferenceNumber Numer referencyjny UPO.
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2SessionsReferenceNumberUpoUpoReferenceNumberGetWithHttpInfo(referenceNumber: kotlin.String, upoReferenceNumber: kotlin.String) : ApiResponse<kotlin.String?> {
        val localVariableConfig = apiV2SessionsReferenceNumberUpoUpoReferenceNumberGetRequestConfig(referenceNumber = referenceNumber, upoReferenceNumber = upoReferenceNumber)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2SessionsReferenceNumberUpoUpoReferenceNumberGet
     *
     * @param referenceNumber Numer referencyjny sesji.
     * @param upoReferenceNumber Numer referencyjny UPO.
     * @return RequestConfig
     */
    fun apiV2SessionsReferenceNumberUpoUpoReferenceNumberGetRequestConfig(referenceNumber: kotlin.String, upoReferenceNumber: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/sessions/{referenceNumber}/upo/{upoReferenceNumber}".replace("{"+"referenceNumber"+"}", encodeURIComponent(referenceNumber.toString())).replace("{"+"upoReferenceNumber"+"}", encodeURIComponent(upoReferenceNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
