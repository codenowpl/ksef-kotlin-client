/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package pl.com.codenow.ksefclient.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import pl.com.codenow.ksefclient.models.AttachmentPermissionGrantRequest
import pl.com.codenow.ksefclient.models.AttachmentPermissionRevokeRequest
import pl.com.codenow.ksefclient.models.ExceptionResponse
import pl.com.codenow.ksefclient.models.PersonCreateRequest
import pl.com.codenow.ksefclient.models.PersonRemoveRequest
import pl.com.codenow.ksefclient.models.SubjectCreateRequest
import pl.com.codenow.ksefclient.models.SubjectRemoveRequest
import pl.com.codenow.ksefclient.models.TestDataPermissionsGrantRequest
import pl.com.codenow.ksefclient.models.TestDataPermissionsRevokeRequest

import com.squareup.moshi.Json

import pl.com.codenow.ksefclient.infrastructure.ApiClient
import pl.com.codenow.ksefclient.infrastructure.ApiResponse
import pl.com.codenow.ksefclient.infrastructure.ClientException
import pl.com.codenow.ksefclient.infrastructure.ClientError
import pl.com.codenow.ksefclient.infrastructure.ServerException
import pl.com.codenow.ksefclient.infrastructure.ServerError
import pl.com.codenow.ksefclient.infrastructure.MultiValueMap
import pl.com.codenow.ksefclient.infrastructure.PartConfig
import pl.com.codenow.ksefclient.infrastructure.RequestConfig
import pl.com.codenow.ksefclient.infrastructure.RequestMethod
import pl.com.codenow.ksefclient.infrastructure.ResponseType
import pl.com.codenow.ksefclient.infrastructure.Success
import pl.com.codenow.ksefclient.infrastructure.toMultiValue

class DaneTestoweKsefApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Umożliwienie wysyłania faktur z załącznikiem
     * Dodaje możliwość wysyłania faktur z załącznikiem przez wskazany podmiot
     * @param attachmentPermissionGrantRequest  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2TestdataAttachmentPost(attachmentPermissionGrantRequest: AttachmentPermissionGrantRequest? = null) : Unit {
        val localVarResponse = apiV2TestdataAttachmentPostWithHttpInfo(attachmentPermissionGrantRequest = attachmentPermissionGrantRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Umożliwienie wysyłania faktur z załącznikiem
     * Dodaje możliwość wysyłania faktur z załącznikiem przez wskazany podmiot
     * @param attachmentPermissionGrantRequest  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2TestdataAttachmentPostWithHttpInfo(attachmentPermissionGrantRequest: AttachmentPermissionGrantRequest?) : ApiResponse<Unit?> {
        val localVariableConfig = apiV2TestdataAttachmentPostRequestConfig(attachmentPermissionGrantRequest = attachmentPermissionGrantRequest)

        return request<AttachmentPermissionGrantRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2TestdataAttachmentPost
     *
     * @param attachmentPermissionGrantRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2TestdataAttachmentPostRequestConfig(attachmentPermissionGrantRequest: AttachmentPermissionGrantRequest?) : RequestConfig<AttachmentPermissionGrantRequest> {
        val localVariableBody = attachmentPermissionGrantRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/testdata/attachment",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Odebranie możliwości wysyłania faktur z załącznikiem
     * Odbiera możliwość wysyłania faktur z załącznikiem przez wskazany podmiot
     * @param attachmentPermissionRevokeRequest  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2TestdataAttachmentRevokePost(attachmentPermissionRevokeRequest: AttachmentPermissionRevokeRequest? = null) : Unit {
        val localVarResponse = apiV2TestdataAttachmentRevokePostWithHttpInfo(attachmentPermissionRevokeRequest = attachmentPermissionRevokeRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Odebranie możliwości wysyłania faktur z załącznikiem
     * Odbiera możliwość wysyłania faktur z załącznikiem przez wskazany podmiot
     * @param attachmentPermissionRevokeRequest  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2TestdataAttachmentRevokePostWithHttpInfo(attachmentPermissionRevokeRequest: AttachmentPermissionRevokeRequest?) : ApiResponse<Unit?> {
        val localVariableConfig = apiV2TestdataAttachmentRevokePostRequestConfig(attachmentPermissionRevokeRequest = attachmentPermissionRevokeRequest)

        return request<AttachmentPermissionRevokeRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2TestdataAttachmentRevokePost
     *
     * @param attachmentPermissionRevokeRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2TestdataAttachmentRevokePostRequestConfig(attachmentPermissionRevokeRequest: AttachmentPermissionRevokeRequest?) : RequestConfig<AttachmentPermissionRevokeRequest> {
        val localVariableBody = attachmentPermissionRevokeRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/testdata/attachment/revoke",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Nadanie uprawnień testowemu podmiotowi/osobie fizycznej
     * Nadawanie uprawnień testowemu podmiotowi lub osobie fizycznej, a także w ich kontekście.
     * @param testDataPermissionsGrantRequest  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2TestdataPermissionsPost(testDataPermissionsGrantRequest: TestDataPermissionsGrantRequest? = null) : Unit {
        val localVarResponse = apiV2TestdataPermissionsPostWithHttpInfo(testDataPermissionsGrantRequest = testDataPermissionsGrantRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Nadanie uprawnień testowemu podmiotowi/osobie fizycznej
     * Nadawanie uprawnień testowemu podmiotowi lub osobie fizycznej, a także w ich kontekście.
     * @param testDataPermissionsGrantRequest  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2TestdataPermissionsPostWithHttpInfo(testDataPermissionsGrantRequest: TestDataPermissionsGrantRequest?) : ApiResponse<Unit?> {
        val localVariableConfig = apiV2TestdataPermissionsPostRequestConfig(testDataPermissionsGrantRequest = testDataPermissionsGrantRequest)

        return request<TestDataPermissionsGrantRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2TestdataPermissionsPost
     *
     * @param testDataPermissionsGrantRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2TestdataPermissionsPostRequestConfig(testDataPermissionsGrantRequest: TestDataPermissionsGrantRequest?) : RequestConfig<TestDataPermissionsGrantRequest> {
        val localVariableBody = testDataPermissionsGrantRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/testdata/permissions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Odebranie uprawnień testowemu podmiotowi/osobie fizycznej
     * Odbieranie uprawnień nadanych testowemu podmiotowi lub osobie fizycznej, a także w ich kontekście.
     * @param testDataPermissionsRevokeRequest  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2TestdataPermissionsRevokePost(testDataPermissionsRevokeRequest: TestDataPermissionsRevokeRequest? = null) : Unit {
        val localVarResponse = apiV2TestdataPermissionsRevokePostWithHttpInfo(testDataPermissionsRevokeRequest = testDataPermissionsRevokeRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Odebranie uprawnień testowemu podmiotowi/osobie fizycznej
     * Odbieranie uprawnień nadanych testowemu podmiotowi lub osobie fizycznej, a także w ich kontekście.
     * @param testDataPermissionsRevokeRequest  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2TestdataPermissionsRevokePostWithHttpInfo(testDataPermissionsRevokeRequest: TestDataPermissionsRevokeRequest?) : ApiResponse<Unit?> {
        val localVariableConfig = apiV2TestdataPermissionsRevokePostRequestConfig(testDataPermissionsRevokeRequest = testDataPermissionsRevokeRequest)

        return request<TestDataPermissionsRevokeRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2TestdataPermissionsRevokePost
     *
     * @param testDataPermissionsRevokeRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2TestdataPermissionsRevokePostRequestConfig(testDataPermissionsRevokeRequest: TestDataPermissionsRevokeRequest?) : RequestConfig<TestDataPermissionsRevokeRequest> {
        val localVariableBody = testDataPermissionsRevokeRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/testdata/permissions/revoke",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Utworzenie osoby fizycznej
     * Tworzenie nowej osoby fizycznej, której system nadaje uprawnienia właścicielskie. Można również określić, czy osoba ta jest komornikiem – wówczas otrzyma odpowiednie uprawnienie egzekucyjne.
     * @param personCreateRequest  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2TestdataPersonPost(personCreateRequest: PersonCreateRequest? = null) : Unit {
        val localVarResponse = apiV2TestdataPersonPostWithHttpInfo(personCreateRequest = personCreateRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Utworzenie osoby fizycznej
     * Tworzenie nowej osoby fizycznej, której system nadaje uprawnienia właścicielskie. Można również określić, czy osoba ta jest komornikiem – wówczas otrzyma odpowiednie uprawnienie egzekucyjne.
     * @param personCreateRequest  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2TestdataPersonPostWithHttpInfo(personCreateRequest: PersonCreateRequest?) : ApiResponse<Unit?> {
        val localVariableConfig = apiV2TestdataPersonPostRequestConfig(personCreateRequest = personCreateRequest)

        return request<PersonCreateRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2TestdataPersonPost
     *
     * @param personCreateRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2TestdataPersonPostRequestConfig(personCreateRequest: PersonCreateRequest?) : RequestConfig<PersonCreateRequest> {
        val localVariableBody = personCreateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/testdata/person",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Usunięcie osoby fizycznej
     * Usuwanie testowej osoby fizycznej. System automatycznie odbierze jej wszystkie uprawnienia.
     * @param personRemoveRequest  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2TestdataPersonRemovePost(personRemoveRequest: PersonRemoveRequest? = null) : Unit {
        val localVarResponse = apiV2TestdataPersonRemovePostWithHttpInfo(personRemoveRequest = personRemoveRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Usunięcie osoby fizycznej
     * Usuwanie testowej osoby fizycznej. System automatycznie odbierze jej wszystkie uprawnienia.
     * @param personRemoveRequest  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2TestdataPersonRemovePostWithHttpInfo(personRemoveRequest: PersonRemoveRequest?) : ApiResponse<Unit?> {
        val localVariableConfig = apiV2TestdataPersonRemovePostRequestConfig(personRemoveRequest = personRemoveRequest)

        return request<PersonRemoveRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2TestdataPersonRemovePost
     *
     * @param personRemoveRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2TestdataPersonRemovePostRequestConfig(personRemoveRequest: PersonRemoveRequest?) : RequestConfig<PersonRemoveRequest> {
        val localVariableBody = personRemoveRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/testdata/person/remove",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Utworzenie podmiotu
     * Tworzenie nowego podmiotu testowego. W przypadku grupy VAT i JST istnieje możliwość stworzenia jednostek podrzędnych. W wyniku takiego działania w systemie powstanie powiązanie między tymi podmiotami.
     * @param subjectCreateRequest  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2TestdataSubjectPost(subjectCreateRequest: SubjectCreateRequest? = null) : Unit {
        val localVarResponse = apiV2TestdataSubjectPostWithHttpInfo(subjectCreateRequest = subjectCreateRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Utworzenie podmiotu
     * Tworzenie nowego podmiotu testowego. W przypadku grupy VAT i JST istnieje możliwość stworzenia jednostek podrzędnych. W wyniku takiego działania w systemie powstanie powiązanie między tymi podmiotami.
     * @param subjectCreateRequest  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2TestdataSubjectPostWithHttpInfo(subjectCreateRequest: SubjectCreateRequest?) : ApiResponse<Unit?> {
        val localVariableConfig = apiV2TestdataSubjectPostRequestConfig(subjectCreateRequest = subjectCreateRequest)

        return request<SubjectCreateRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2TestdataSubjectPost
     *
     * @param subjectCreateRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2TestdataSubjectPostRequestConfig(subjectCreateRequest: SubjectCreateRequest?) : RequestConfig<SubjectCreateRequest> {
        val localVariableBody = subjectCreateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/testdata/subject",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Usunięcie podmiotu
     * Usuwanie podmiotu testowego. W przypadku grupy VAT i JST usunięte zostaną również jednostki podrzędne.
     * @param subjectRemoveRequest  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2TestdataSubjectRemovePost(subjectRemoveRequest: SubjectRemoveRequest? = null) : Unit {
        val localVarResponse = apiV2TestdataSubjectRemovePostWithHttpInfo(subjectRemoveRequest = subjectRemoveRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Usunięcie podmiotu
     * Usuwanie podmiotu testowego. W przypadku grupy VAT i JST usunięte zostaną również jednostki podrzędne.
     * @param subjectRemoveRequest  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2TestdataSubjectRemovePostWithHttpInfo(subjectRemoveRequest: SubjectRemoveRequest?) : ApiResponse<Unit?> {
        val localVariableConfig = apiV2TestdataSubjectRemovePostRequestConfig(subjectRemoveRequest = subjectRemoveRequest)

        return request<SubjectRemoveRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2TestdataSubjectRemovePost
     *
     * @param subjectRemoveRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2TestdataSubjectRemovePostRequestConfig(subjectRemoveRequest: SubjectRemoveRequest?) : RequestConfig<SubjectRemoveRequest> {
        val localVariableBody = subjectRemoveRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/testdata/subject/remove",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
