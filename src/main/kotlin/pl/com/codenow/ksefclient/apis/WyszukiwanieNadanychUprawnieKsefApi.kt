/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package pl.com.codenow.ksefclient.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import pl.com.codenow.ksefclient.models.EntityAuthorizationPermissionsQueryRequest
import pl.com.codenow.ksefclient.models.EuEntityPermissionsQueryRequest
import pl.com.codenow.ksefclient.models.ExceptionResponse
import pl.com.codenow.ksefclient.models.PersonPermissionsQueryRequest
import pl.com.codenow.ksefclient.models.PersonalPermissionsQueryRequest
import pl.com.codenow.ksefclient.models.QueryEntityAuthorizationPermissionsResponse
import pl.com.codenow.ksefclient.models.QueryEntityRolesResponse
import pl.com.codenow.ksefclient.models.QueryEuEntityPermissionsResponse
import pl.com.codenow.ksefclient.models.QueryPersonPermissionsResponse
import pl.com.codenow.ksefclient.models.QueryPersonalPermissionsResponse
import pl.com.codenow.ksefclient.models.QuerySubordinateEntityRolesResponse
import pl.com.codenow.ksefclient.models.QuerySubunitPermissionsResponse
import pl.com.codenow.ksefclient.models.SubordinateEntityRolesQueryRequest
import pl.com.codenow.ksefclient.models.SubunitPermissionsQueryRequest

import com.squareup.moshi.Json

import pl.com.codenow.ksefclient.infrastructure.ApiClient
import pl.com.codenow.ksefclient.infrastructure.ApiResponse
import pl.com.codenow.ksefclient.infrastructure.ClientException
import pl.com.codenow.ksefclient.infrastructure.ClientError
import pl.com.codenow.ksefclient.infrastructure.ServerException
import pl.com.codenow.ksefclient.infrastructure.ServerError
import pl.com.codenow.ksefclient.infrastructure.MultiValueMap
import pl.com.codenow.ksefclient.infrastructure.PartConfig
import pl.com.codenow.ksefclient.infrastructure.RequestConfig
import pl.com.codenow.ksefclient.infrastructure.RequestMethod
import pl.com.codenow.ksefclient.infrastructure.ResponseType
import pl.com.codenow.ksefclient.infrastructure.Success
import pl.com.codenow.ksefclient.infrastructure.toMultiValue

class WyszukiwanieNadanychUprawnieKsefApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Pobranie listy uprawnień podmiotowych do obsługi faktur
     * Zwraca listę uprawnień podmiotowych do obsługi faktur.  &gt; Więcej informacji: &gt; - [Pobieranie listy uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#pobranie-listy-uprawnie%C5%84-podmiotowych-do-obs%C5%82ugi-faktur)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;, &#x60;CredentialsRead&#x60;.
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param entityAuthorizationPermissionsQueryRequest  (optional)
     * @return QueryEntityAuthorizationPermissionsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2PermissionsQueryAuthorizationsGrantsPost(pageOffset: kotlin.Int? = null, pageSize: kotlin.Int? = null, entityAuthorizationPermissionsQueryRequest: EntityAuthorizationPermissionsQueryRequest? = null) : QueryEntityAuthorizationPermissionsResponse {
        val localVarResponse = apiV2PermissionsQueryAuthorizationsGrantsPostWithHttpInfo(pageOffset = pageOffset, pageSize = pageSize, entityAuthorizationPermissionsQueryRequest = entityAuthorizationPermissionsQueryRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QueryEntityAuthorizationPermissionsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie listy uprawnień podmiotowych do obsługi faktur
     * Zwraca listę uprawnień podmiotowych do obsługi faktur.  &gt; Więcej informacji: &gt; - [Pobieranie listy uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#pobranie-listy-uprawnie%C5%84-podmiotowych-do-obs%C5%82ugi-faktur)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;, &#x60;CredentialsRead&#x60;.
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param entityAuthorizationPermissionsQueryRequest  (optional)
     * @return ApiResponse<QueryEntityAuthorizationPermissionsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2PermissionsQueryAuthorizationsGrantsPostWithHttpInfo(pageOffset: kotlin.Int?, pageSize: kotlin.Int?, entityAuthorizationPermissionsQueryRequest: EntityAuthorizationPermissionsQueryRequest?) : ApiResponse<QueryEntityAuthorizationPermissionsResponse?> {
        val localVariableConfig = apiV2PermissionsQueryAuthorizationsGrantsPostRequestConfig(pageOffset = pageOffset, pageSize = pageSize, entityAuthorizationPermissionsQueryRequest = entityAuthorizationPermissionsQueryRequest)

        return request<EntityAuthorizationPermissionsQueryRequest, QueryEntityAuthorizationPermissionsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2PermissionsQueryAuthorizationsGrantsPost
     *
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param entityAuthorizationPermissionsQueryRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2PermissionsQueryAuthorizationsGrantsPostRequestConfig(pageOffset: kotlin.Int?, pageSize: kotlin.Int?, entityAuthorizationPermissionsQueryRequest: EntityAuthorizationPermissionsQueryRequest?) : RequestConfig<EntityAuthorizationPermissionsQueryRequest> {
        val localVariableBody = entityAuthorizationPermissionsQueryRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (pageOffset != null) {
                    put("pageOffset", listOf(pageOffset.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/permissions/query/authorizations/grants",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Pobranie listy ról podmiotu
     * Zwraca listę ról podmiotu.  &gt; Więcej informacji: &gt; - [Pobieranie listy ról](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#pobranie-listy-r%C3%B3l-podmiotu)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;, &#x60;CredentialsRead&#x60;.
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @return QueryEntityRolesResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2PermissionsQueryEntitiesRolesGet(pageOffset: kotlin.Int? = null, pageSize: kotlin.Int? = null) : QueryEntityRolesResponse {
        val localVarResponse = apiV2PermissionsQueryEntitiesRolesGetWithHttpInfo(pageOffset = pageOffset, pageSize = pageSize)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QueryEntityRolesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie listy ról podmiotu
     * Zwraca listę ról podmiotu.  &gt; Więcej informacji: &gt; - [Pobieranie listy ról](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#pobranie-listy-r%C3%B3l-podmiotu)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;, &#x60;CredentialsRead&#x60;.
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @return ApiResponse<QueryEntityRolesResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2PermissionsQueryEntitiesRolesGetWithHttpInfo(pageOffset: kotlin.Int?, pageSize: kotlin.Int?) : ApiResponse<QueryEntityRolesResponse?> {
        val localVariableConfig = apiV2PermissionsQueryEntitiesRolesGetRequestConfig(pageOffset = pageOffset, pageSize = pageSize)

        return request<Unit, QueryEntityRolesResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2PermissionsQueryEntitiesRolesGet
     *
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @return RequestConfig
     */
    fun apiV2PermissionsQueryEntitiesRolesGetRequestConfig(pageOffset: kotlin.Int?, pageSize: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (pageOffset != null) {
                    put("pageOffset", listOf(pageOffset.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/permissions/query/entities/roles",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Pobranie listy uprawnień administratorów lub reprezentantów podmiotów unijnych uprawnionych do samofakturowania
     * Zwraca listę uprawnień administratorów lub reprezentantów podmiotów unijnych uprawnionych do samofakturowania.  &gt; Więcej informacji: &gt; - [Pobieranie listy uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#pobranie-listy-uprawnie%C5%84-administrator%C3%B3w-lub-reprezentant%C3%B3w-podmiot%C3%B3w-unijnych-uprawnionych-do-samofakturowania)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;, &#x60;CredentialsRead&#x60;, &#x60;VatUeManage&#x60;.
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param euEntityPermissionsQueryRequest  (optional)
     * @return QueryEuEntityPermissionsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2PermissionsQueryEuEntitiesGrantsPost(pageOffset: kotlin.Int? = null, pageSize: kotlin.Int? = null, euEntityPermissionsQueryRequest: EuEntityPermissionsQueryRequest? = null) : QueryEuEntityPermissionsResponse {
        val localVarResponse = apiV2PermissionsQueryEuEntitiesGrantsPostWithHttpInfo(pageOffset = pageOffset, pageSize = pageSize, euEntityPermissionsQueryRequest = euEntityPermissionsQueryRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QueryEuEntityPermissionsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie listy uprawnień administratorów lub reprezentantów podmiotów unijnych uprawnionych do samofakturowania
     * Zwraca listę uprawnień administratorów lub reprezentantów podmiotów unijnych uprawnionych do samofakturowania.  &gt; Więcej informacji: &gt; - [Pobieranie listy uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#pobranie-listy-uprawnie%C5%84-administrator%C3%B3w-lub-reprezentant%C3%B3w-podmiot%C3%B3w-unijnych-uprawnionych-do-samofakturowania)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;, &#x60;CredentialsRead&#x60;, &#x60;VatUeManage&#x60;.
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param euEntityPermissionsQueryRequest  (optional)
     * @return ApiResponse<QueryEuEntityPermissionsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2PermissionsQueryEuEntitiesGrantsPostWithHttpInfo(pageOffset: kotlin.Int?, pageSize: kotlin.Int?, euEntityPermissionsQueryRequest: EuEntityPermissionsQueryRequest?) : ApiResponse<QueryEuEntityPermissionsResponse?> {
        val localVariableConfig = apiV2PermissionsQueryEuEntitiesGrantsPostRequestConfig(pageOffset = pageOffset, pageSize = pageSize, euEntityPermissionsQueryRequest = euEntityPermissionsQueryRequest)

        return request<EuEntityPermissionsQueryRequest, QueryEuEntityPermissionsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2PermissionsQueryEuEntitiesGrantsPost
     *
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param euEntityPermissionsQueryRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2PermissionsQueryEuEntitiesGrantsPostRequestConfig(pageOffset: kotlin.Int?, pageSize: kotlin.Int?, euEntityPermissionsQueryRequest: EuEntityPermissionsQueryRequest?) : RequestConfig<EuEntityPermissionsQueryRequest> {
        val localVariableBody = euEntityPermissionsQueryRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (pageOffset != null) {
                    put("pageOffset", listOf(pageOffset.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/permissions/query/eu-entities/grants",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Pobranie listy własnych uprawnień
     * Zwraca listę uprawnień przysługujących uwierzytelnionemu podmiotowi.  &gt; Więcej informacji: &gt; - [Pobieranie listy uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#pobranie-listy-w%C5%82asnych-uprawnie%C5%84)
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param personalPermissionsQueryRequest  (optional)
     * @return QueryPersonalPermissionsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2PermissionsQueryPersonalGrantsPost(pageOffset: kotlin.Int? = null, pageSize: kotlin.Int? = null, personalPermissionsQueryRequest: PersonalPermissionsQueryRequest? = null) : QueryPersonalPermissionsResponse {
        val localVarResponse = apiV2PermissionsQueryPersonalGrantsPostWithHttpInfo(pageOffset = pageOffset, pageSize = pageSize, personalPermissionsQueryRequest = personalPermissionsQueryRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QueryPersonalPermissionsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie listy własnych uprawnień
     * Zwraca listę uprawnień przysługujących uwierzytelnionemu podmiotowi.  &gt; Więcej informacji: &gt; - [Pobieranie listy uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#pobranie-listy-w%C5%82asnych-uprawnie%C5%84)
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param personalPermissionsQueryRequest  (optional)
     * @return ApiResponse<QueryPersonalPermissionsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2PermissionsQueryPersonalGrantsPostWithHttpInfo(pageOffset: kotlin.Int?, pageSize: kotlin.Int?, personalPermissionsQueryRequest: PersonalPermissionsQueryRequest?) : ApiResponse<QueryPersonalPermissionsResponse?> {
        val localVariableConfig = apiV2PermissionsQueryPersonalGrantsPostRequestConfig(pageOffset = pageOffset, pageSize = pageSize, personalPermissionsQueryRequest = personalPermissionsQueryRequest)

        return request<PersonalPermissionsQueryRequest, QueryPersonalPermissionsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2PermissionsQueryPersonalGrantsPost
     *
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param personalPermissionsQueryRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2PermissionsQueryPersonalGrantsPostRequestConfig(pageOffset: kotlin.Int?, pageSize: kotlin.Int?, personalPermissionsQueryRequest: PersonalPermissionsQueryRequest?) : RequestConfig<PersonalPermissionsQueryRequest> {
        val localVariableBody = personalPermissionsQueryRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (pageOffset != null) {
                    put("pageOffset", listOf(pageOffset.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/permissions/query/personal/grants",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Pobranie listy uprawnień do pracy w KSeF nadanych osobom fizycznym lub podmiotom
     * Zwraca listę uprawnień do pracy w KSeF nadanych osobom fizycznym lub podmiotom.  &gt; Więcej informacji: &gt; - [Pobieranie listy uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#pobranie-listy-uprawnie%C5%84-do-pracy-w-ksef-nadanych-osobom-fizycznym-lub-podmiotom)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;, &#x60;CredentialsRead&#x60;.
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param personPermissionsQueryRequest  (optional)
     * @return QueryPersonPermissionsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2PermissionsQueryPersonsGrantsPost(pageOffset: kotlin.Int? = null, pageSize: kotlin.Int? = null, personPermissionsQueryRequest: PersonPermissionsQueryRequest? = null) : QueryPersonPermissionsResponse {
        val localVarResponse = apiV2PermissionsQueryPersonsGrantsPostWithHttpInfo(pageOffset = pageOffset, pageSize = pageSize, personPermissionsQueryRequest = personPermissionsQueryRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QueryPersonPermissionsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie listy uprawnień do pracy w KSeF nadanych osobom fizycznym lub podmiotom
     * Zwraca listę uprawnień do pracy w KSeF nadanych osobom fizycznym lub podmiotom.  &gt; Więcej informacji: &gt; - [Pobieranie listy uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#pobranie-listy-uprawnie%C5%84-do-pracy-w-ksef-nadanych-osobom-fizycznym-lub-podmiotom)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;, &#x60;CredentialsRead&#x60;.
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param personPermissionsQueryRequest  (optional)
     * @return ApiResponse<QueryPersonPermissionsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2PermissionsQueryPersonsGrantsPostWithHttpInfo(pageOffset: kotlin.Int?, pageSize: kotlin.Int?, personPermissionsQueryRequest: PersonPermissionsQueryRequest?) : ApiResponse<QueryPersonPermissionsResponse?> {
        val localVariableConfig = apiV2PermissionsQueryPersonsGrantsPostRequestConfig(pageOffset = pageOffset, pageSize = pageSize, personPermissionsQueryRequest = personPermissionsQueryRequest)

        return request<PersonPermissionsQueryRequest, QueryPersonPermissionsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2PermissionsQueryPersonsGrantsPost
     *
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param personPermissionsQueryRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2PermissionsQueryPersonsGrantsPostRequestConfig(pageOffset: kotlin.Int?, pageSize: kotlin.Int?, personPermissionsQueryRequest: PersonPermissionsQueryRequest?) : RequestConfig<PersonPermissionsQueryRequest> {
        val localVariableBody = personPermissionsQueryRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (pageOffset != null) {
                    put("pageOffset", listOf(pageOffset.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/permissions/query/persons/grants",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Pobranie listy podmiotów podrzędnych
     * Zwraca liste podmiotów podrzędnych.  &gt; Więcej informacji: &gt; - [Pobieranie listy podmiotów podrzędnych](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#pobranie-listy-podmiot%C3%B3w-podrz%C4%99dnych)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;, &#x60;CredentialsRead&#x60;, &#x60;SubunitManage&#x60;.
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param subordinateEntityRolesQueryRequest  (optional)
     * @return QuerySubordinateEntityRolesResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2PermissionsQuerySubordinateEntitiesRolesPost(pageOffset: kotlin.Int? = null, pageSize: kotlin.Int? = null, subordinateEntityRolesQueryRequest: SubordinateEntityRolesQueryRequest? = null) : QuerySubordinateEntityRolesResponse {
        val localVarResponse = apiV2PermissionsQuerySubordinateEntitiesRolesPostWithHttpInfo(pageOffset = pageOffset, pageSize = pageSize, subordinateEntityRolesQueryRequest = subordinateEntityRolesQueryRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QuerySubordinateEntityRolesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie listy podmiotów podrzędnych
     * Zwraca liste podmiotów podrzędnych.  &gt; Więcej informacji: &gt; - [Pobieranie listy podmiotów podrzędnych](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#pobranie-listy-podmiot%C3%B3w-podrz%C4%99dnych)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;, &#x60;CredentialsRead&#x60;, &#x60;SubunitManage&#x60;.
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param subordinateEntityRolesQueryRequest  (optional)
     * @return ApiResponse<QuerySubordinateEntityRolesResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2PermissionsQuerySubordinateEntitiesRolesPostWithHttpInfo(pageOffset: kotlin.Int?, pageSize: kotlin.Int?, subordinateEntityRolesQueryRequest: SubordinateEntityRolesQueryRequest?) : ApiResponse<QuerySubordinateEntityRolesResponse?> {
        val localVariableConfig = apiV2PermissionsQuerySubordinateEntitiesRolesPostRequestConfig(pageOffset = pageOffset, pageSize = pageSize, subordinateEntityRolesQueryRequest = subordinateEntityRolesQueryRequest)

        return request<SubordinateEntityRolesQueryRequest, QuerySubordinateEntityRolesResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2PermissionsQuerySubordinateEntitiesRolesPost
     *
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param subordinateEntityRolesQueryRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2PermissionsQuerySubordinateEntitiesRolesPostRequestConfig(pageOffset: kotlin.Int?, pageSize: kotlin.Int?, subordinateEntityRolesQueryRequest: SubordinateEntityRolesQueryRequest?) : RequestConfig<SubordinateEntityRolesQueryRequest> {
        val localVariableBody = subordinateEntityRolesQueryRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (pageOffset != null) {
                    put("pageOffset", listOf(pageOffset.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/permissions/query/subordinate-entities/roles",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Pobranie listy uprawnień administratorów jednostek i podmiotów podrzędnych
     * Zwraca listę uprawnień administratorów jednostek i podmiotów podrzędnych.  &gt; Więcej informacji: &gt; - [Pobieranie listy uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#pobranie-listy-uprawnie%C5%84-administrator%C3%B3w-jednostek-i-podmiot%C3%B3w-podrz%C4%99dnych)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;, &#x60;CredentialsRead&#x60;, &#x60;SubunitManage&#x60;.
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param subunitPermissionsQueryRequest  (optional)
     * @return QuerySubunitPermissionsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2PermissionsQuerySubunitsGrantsPost(pageOffset: kotlin.Int? = null, pageSize: kotlin.Int? = null, subunitPermissionsQueryRequest: SubunitPermissionsQueryRequest? = null) : QuerySubunitPermissionsResponse {
        val localVarResponse = apiV2PermissionsQuerySubunitsGrantsPostWithHttpInfo(pageOffset = pageOffset, pageSize = pageSize, subunitPermissionsQueryRequest = subunitPermissionsQueryRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QuerySubunitPermissionsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie listy uprawnień administratorów jednostek i podmiotów podrzędnych
     * Zwraca listę uprawnień administratorów jednostek i podmiotów podrzędnych.  &gt; Więcej informacji: &gt; - [Pobieranie listy uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#pobranie-listy-uprawnie%C5%84-administrator%C3%B3w-jednostek-i-podmiot%C3%B3w-podrz%C4%99dnych)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;, &#x60;CredentialsRead&#x60;, &#x60;SubunitManage&#x60;.
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param subunitPermissionsQueryRequest  (optional)
     * @return ApiResponse<QuerySubunitPermissionsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2PermissionsQuerySubunitsGrantsPostWithHttpInfo(pageOffset: kotlin.Int?, pageSize: kotlin.Int?, subunitPermissionsQueryRequest: SubunitPermissionsQueryRequest?) : ApiResponse<QuerySubunitPermissionsResponse?> {
        val localVariableConfig = apiV2PermissionsQuerySubunitsGrantsPostRequestConfig(pageOffset = pageOffset, pageSize = pageSize, subunitPermissionsQueryRequest = subunitPermissionsQueryRequest)

        return request<SubunitPermissionsQueryRequest, QuerySubunitPermissionsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2PermissionsQuerySubunitsGrantsPost
     *
     * @param pageOffset Numer strony wyników. (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param subunitPermissionsQueryRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2PermissionsQuerySubunitsGrantsPostRequestConfig(pageOffset: kotlin.Int?, pageSize: kotlin.Int?, subunitPermissionsQueryRequest: SubunitPermissionsQueryRequest?) : RequestConfig<SubunitPermissionsQueryRequest> {
        val localVariableBody = subunitPermissionsQueryRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (pageOffset != null) {
                    put("pageOffset", listOf(pageOffset.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/permissions/query/subunits/grants",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
