/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package pl.com.codenow.ksefclient.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import pl.com.codenow.ksefclient.models.EntityAuthorizationPermissionsGrantRequest
import pl.com.codenow.ksefclient.models.EntityPermissionsGrantRequest
import pl.com.codenow.ksefclient.models.EuEntityAdministrationPermissionsGrantRequest
import pl.com.codenow.ksefclient.models.EuEntityPermissionsGrantRequest
import pl.com.codenow.ksefclient.models.ExceptionResponse
import pl.com.codenow.ksefclient.models.IndirectPermissionsGrantRequest
import pl.com.codenow.ksefclient.models.PermissionsOperationResponse
import pl.com.codenow.ksefclient.models.PersonPermissionsGrantRequest
import pl.com.codenow.ksefclient.models.SubunitPermissionsGrantRequest

import com.squareup.moshi.Json

import pl.com.codenow.ksefclient.infrastructure.ApiClient
import pl.com.codenow.ksefclient.infrastructure.ApiResponse
import pl.com.codenow.ksefclient.infrastructure.ClientException
import pl.com.codenow.ksefclient.infrastructure.ClientError
import pl.com.codenow.ksefclient.infrastructure.ServerException
import pl.com.codenow.ksefclient.infrastructure.ServerError
import pl.com.codenow.ksefclient.infrastructure.MultiValueMap
import pl.com.codenow.ksefclient.infrastructure.PartConfig
import pl.com.codenow.ksefclient.infrastructure.RequestConfig
import pl.com.codenow.ksefclient.infrastructure.RequestMethod
import pl.com.codenow.ksefclient.infrastructure.ResponseType
import pl.com.codenow.ksefclient.infrastructure.Success
import pl.com.codenow.ksefclient.infrastructure.toMultiValue

class NadawanieUprawnieKsefApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Nadanie uprawnień podmiotowych
     * Rozpoczyna asynchroniczną operację nadawania uprawnień podmiotowych.  &gt; Więcej informacji: &gt; - [Nadawanie uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#nadanie-uprawnie%C5%84-podmiotowych)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;.
     * @param entityAuthorizationPermissionsGrantRequest  (optional)
     * @return PermissionsOperationResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2PermissionsAuthorizationsGrantsPost(entityAuthorizationPermissionsGrantRequest: EntityAuthorizationPermissionsGrantRequest? = null) : PermissionsOperationResponse {
        val localVarResponse = apiV2PermissionsAuthorizationsGrantsPostWithHttpInfo(entityAuthorizationPermissionsGrantRequest = entityAuthorizationPermissionsGrantRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PermissionsOperationResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Nadanie uprawnień podmiotowych
     * Rozpoczyna asynchroniczną operację nadawania uprawnień podmiotowych.  &gt; Więcej informacji: &gt; - [Nadawanie uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#nadanie-uprawnie%C5%84-podmiotowych)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;.
     * @param entityAuthorizationPermissionsGrantRequest  (optional)
     * @return ApiResponse<PermissionsOperationResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2PermissionsAuthorizationsGrantsPostWithHttpInfo(entityAuthorizationPermissionsGrantRequest: EntityAuthorizationPermissionsGrantRequest?) : ApiResponse<PermissionsOperationResponse?> {
        val localVariableConfig = apiV2PermissionsAuthorizationsGrantsPostRequestConfig(entityAuthorizationPermissionsGrantRequest = entityAuthorizationPermissionsGrantRequest)

        return request<EntityAuthorizationPermissionsGrantRequest, PermissionsOperationResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2PermissionsAuthorizationsGrantsPost
     *
     * @param entityAuthorizationPermissionsGrantRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2PermissionsAuthorizationsGrantsPostRequestConfig(entityAuthorizationPermissionsGrantRequest: EntityAuthorizationPermissionsGrantRequest?) : RequestConfig<EntityAuthorizationPermissionsGrantRequest> {
        val localVariableBody = entityAuthorizationPermissionsGrantRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/permissions/authorizations/grants",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Nadanie podmiotom uprawnień do obsługi faktur
     * Rozpoczyna asynchroniczną operację nadawania podmiotom uprawnień do obsługi faktur.  &gt; Więcej informacji: &gt; - [Nadawanie uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#nadanie-podmiotom-uprawnie%C5%84-do-obs%C5%82ugi-faktur)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;.
     * @param entityPermissionsGrantRequest  (optional)
     * @return PermissionsOperationResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2PermissionsEntitiesGrantsPost(entityPermissionsGrantRequest: EntityPermissionsGrantRequest? = null) : PermissionsOperationResponse {
        val localVarResponse = apiV2PermissionsEntitiesGrantsPostWithHttpInfo(entityPermissionsGrantRequest = entityPermissionsGrantRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PermissionsOperationResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Nadanie podmiotom uprawnień do obsługi faktur
     * Rozpoczyna asynchroniczną operację nadawania podmiotom uprawnień do obsługi faktur.  &gt; Więcej informacji: &gt; - [Nadawanie uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#nadanie-podmiotom-uprawnie%C5%84-do-obs%C5%82ugi-faktur)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;.
     * @param entityPermissionsGrantRequest  (optional)
     * @return ApiResponse<PermissionsOperationResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2PermissionsEntitiesGrantsPostWithHttpInfo(entityPermissionsGrantRequest: EntityPermissionsGrantRequest?) : ApiResponse<PermissionsOperationResponse?> {
        val localVariableConfig = apiV2PermissionsEntitiesGrantsPostRequestConfig(entityPermissionsGrantRequest = entityPermissionsGrantRequest)

        return request<EntityPermissionsGrantRequest, PermissionsOperationResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2PermissionsEntitiesGrantsPost
     *
     * @param entityPermissionsGrantRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2PermissionsEntitiesGrantsPostRequestConfig(entityPermissionsGrantRequest: EntityPermissionsGrantRequest?) : RequestConfig<EntityPermissionsGrantRequest> {
        val localVariableBody = entityPermissionsGrantRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/permissions/entities/grants",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Nadanie uprawnień administratora podmiotu unijnego
     * Rozpoczyna asynchroniczną operację nadawania uprawnień administratora podmiotu unijnego.  &gt; Więcej informacji: &gt; - [Nadawanie uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#nadanie-uprawnie%C5%84-administratora-podmiotu-unijnego)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;.
     * @param euEntityAdministrationPermissionsGrantRequest  (optional)
     * @return PermissionsOperationResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2PermissionsEuEntitiesAdministrationGrantsPost(euEntityAdministrationPermissionsGrantRequest: EuEntityAdministrationPermissionsGrantRequest? = null) : PermissionsOperationResponse {
        val localVarResponse = apiV2PermissionsEuEntitiesAdministrationGrantsPostWithHttpInfo(euEntityAdministrationPermissionsGrantRequest = euEntityAdministrationPermissionsGrantRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PermissionsOperationResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Nadanie uprawnień administratora podmiotu unijnego
     * Rozpoczyna asynchroniczną operację nadawania uprawnień administratora podmiotu unijnego.  &gt; Więcej informacji: &gt; - [Nadawanie uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#nadanie-uprawnie%C5%84-administratora-podmiotu-unijnego)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;.
     * @param euEntityAdministrationPermissionsGrantRequest  (optional)
     * @return ApiResponse<PermissionsOperationResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2PermissionsEuEntitiesAdministrationGrantsPostWithHttpInfo(euEntityAdministrationPermissionsGrantRequest: EuEntityAdministrationPermissionsGrantRequest?) : ApiResponse<PermissionsOperationResponse?> {
        val localVariableConfig = apiV2PermissionsEuEntitiesAdministrationGrantsPostRequestConfig(euEntityAdministrationPermissionsGrantRequest = euEntityAdministrationPermissionsGrantRequest)

        return request<EuEntityAdministrationPermissionsGrantRequest, PermissionsOperationResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2PermissionsEuEntitiesAdministrationGrantsPost
     *
     * @param euEntityAdministrationPermissionsGrantRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2PermissionsEuEntitiesAdministrationGrantsPostRequestConfig(euEntityAdministrationPermissionsGrantRequest: EuEntityAdministrationPermissionsGrantRequest?) : RequestConfig<EuEntityAdministrationPermissionsGrantRequest> {
        val localVariableBody = euEntityAdministrationPermissionsGrantRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/permissions/eu-entities/administration/grants",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Nadanie uprawnień reprezentanta podmiotu unijnego
     * Rozpoczyna asynchroniczną operację nadawania uprawnień reprezentanta podmiotu unijnego.  &gt; Więcej informacji: &gt; - [Nadawanie uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#nadanie-uprawnie%C5%84-reprezentanta-podmiotu-unijnego)  Wymagane uprawnienia: &#x60;VatUeManage&#x60;.
     * @param euEntityPermissionsGrantRequest  (optional)
     * @return PermissionsOperationResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2PermissionsEuEntitiesGrantsPost(euEntityPermissionsGrantRequest: EuEntityPermissionsGrantRequest? = null) : PermissionsOperationResponse {
        val localVarResponse = apiV2PermissionsEuEntitiesGrantsPostWithHttpInfo(euEntityPermissionsGrantRequest = euEntityPermissionsGrantRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PermissionsOperationResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Nadanie uprawnień reprezentanta podmiotu unijnego
     * Rozpoczyna asynchroniczną operację nadawania uprawnień reprezentanta podmiotu unijnego.  &gt; Więcej informacji: &gt; - [Nadawanie uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#nadanie-uprawnie%C5%84-reprezentanta-podmiotu-unijnego)  Wymagane uprawnienia: &#x60;VatUeManage&#x60;.
     * @param euEntityPermissionsGrantRequest  (optional)
     * @return ApiResponse<PermissionsOperationResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2PermissionsEuEntitiesGrantsPostWithHttpInfo(euEntityPermissionsGrantRequest: EuEntityPermissionsGrantRequest?) : ApiResponse<PermissionsOperationResponse?> {
        val localVariableConfig = apiV2PermissionsEuEntitiesGrantsPostRequestConfig(euEntityPermissionsGrantRequest = euEntityPermissionsGrantRequest)

        return request<EuEntityPermissionsGrantRequest, PermissionsOperationResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2PermissionsEuEntitiesGrantsPost
     *
     * @param euEntityPermissionsGrantRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2PermissionsEuEntitiesGrantsPostRequestConfig(euEntityPermissionsGrantRequest: EuEntityPermissionsGrantRequest?) : RequestConfig<EuEntityPermissionsGrantRequest> {
        val localVariableBody = euEntityPermissionsGrantRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/permissions/eu-entities/grants",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Nadanie uprawnień w sposób pośredni
     * Rozpoczyna asynchroniczną operację nadawania uprawnień w sposób pośredni.  &gt; Więcej informacji: &gt; - [Nadawanie uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#nadanie-uprawnie%C5%84-w-spos%C3%B3b-po%C5%9Bredni)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;.
     * @param indirectPermissionsGrantRequest  (optional)
     * @return PermissionsOperationResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2PermissionsIndirectGrantsPost(indirectPermissionsGrantRequest: IndirectPermissionsGrantRequest? = null) : PermissionsOperationResponse {
        val localVarResponse = apiV2PermissionsIndirectGrantsPostWithHttpInfo(indirectPermissionsGrantRequest = indirectPermissionsGrantRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PermissionsOperationResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Nadanie uprawnień w sposób pośredni
     * Rozpoczyna asynchroniczną operację nadawania uprawnień w sposób pośredni.  &gt; Więcej informacji: &gt; - [Nadawanie uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#nadanie-uprawnie%C5%84-w-spos%C3%B3b-po%C5%9Bredni)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;.
     * @param indirectPermissionsGrantRequest  (optional)
     * @return ApiResponse<PermissionsOperationResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2PermissionsIndirectGrantsPostWithHttpInfo(indirectPermissionsGrantRequest: IndirectPermissionsGrantRequest?) : ApiResponse<PermissionsOperationResponse?> {
        val localVariableConfig = apiV2PermissionsIndirectGrantsPostRequestConfig(indirectPermissionsGrantRequest = indirectPermissionsGrantRequest)

        return request<IndirectPermissionsGrantRequest, PermissionsOperationResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2PermissionsIndirectGrantsPost
     *
     * @param indirectPermissionsGrantRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2PermissionsIndirectGrantsPostRequestConfig(indirectPermissionsGrantRequest: IndirectPermissionsGrantRequest?) : RequestConfig<IndirectPermissionsGrantRequest> {
        val localVariableBody = indirectPermissionsGrantRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/permissions/indirect/grants",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Nadanie osobom fizycznym uprawnień do pracy w KSeF
     * Rozpoczyna asynchroniczną operację nadawania osobom fizycznym uprawnień do pracy w KSeF.  &gt; Więcej informacji: &gt; - [Nadawanie uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#nadawanie-uprawnie%C5%84-osobom-fizycznym-do-pracy-w-ksef)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;.
     * @param personPermissionsGrantRequest  (optional)
     * @return PermissionsOperationResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2PermissionsPersonsGrantsPost(personPermissionsGrantRequest: PersonPermissionsGrantRequest? = null) : PermissionsOperationResponse {
        val localVarResponse = apiV2PermissionsPersonsGrantsPostWithHttpInfo(personPermissionsGrantRequest = personPermissionsGrantRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PermissionsOperationResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Nadanie osobom fizycznym uprawnień do pracy w KSeF
     * Rozpoczyna asynchroniczną operację nadawania osobom fizycznym uprawnień do pracy w KSeF.  &gt; Więcej informacji: &gt; - [Nadawanie uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#nadawanie-uprawnie%C5%84-osobom-fizycznym-do-pracy-w-ksef)  Wymagane uprawnienia: &#x60;CredentialsManage&#x60;.
     * @param personPermissionsGrantRequest  (optional)
     * @return ApiResponse<PermissionsOperationResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2PermissionsPersonsGrantsPostWithHttpInfo(personPermissionsGrantRequest: PersonPermissionsGrantRequest?) : ApiResponse<PermissionsOperationResponse?> {
        val localVariableConfig = apiV2PermissionsPersonsGrantsPostRequestConfig(personPermissionsGrantRequest = personPermissionsGrantRequest)

        return request<PersonPermissionsGrantRequest, PermissionsOperationResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2PermissionsPersonsGrantsPost
     *
     * @param personPermissionsGrantRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2PermissionsPersonsGrantsPostRequestConfig(personPermissionsGrantRequest: PersonPermissionsGrantRequest?) : RequestConfig<PersonPermissionsGrantRequest> {
        val localVariableBody = personPermissionsGrantRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/permissions/persons/grants",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Nadanie uprawnień administratora podmiotu podrzędnego
     * Rozpoczyna asynchroniczną operację nadawania uprawnień administratora podmiotu podrzędnego.  &gt; Więcej informacji: &gt; - [Nadawanie uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#nadanie-uprawnie%C5%84-administratora-podmiotu-podrz%C4%99dnego)  Wymagane uprawnienia: &#x60;SubunitManage&#x60;.
     * @param subunitPermissionsGrantRequest  (optional)
     * @return PermissionsOperationResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2PermissionsSubunitsGrantsPost(subunitPermissionsGrantRequest: SubunitPermissionsGrantRequest? = null) : PermissionsOperationResponse {
        val localVarResponse = apiV2PermissionsSubunitsGrantsPostWithHttpInfo(subunitPermissionsGrantRequest = subunitPermissionsGrantRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PermissionsOperationResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Nadanie uprawnień administratora podmiotu podrzędnego
     * Rozpoczyna asynchroniczną operację nadawania uprawnień administratora podmiotu podrzędnego.  &gt; Więcej informacji: &gt; - [Nadawanie uprawnień](https://github.com/CIRFMF/ksef-docs/blob/main/uprawnienia.md#nadanie-uprawnie%C5%84-administratora-podmiotu-podrz%C4%99dnego)  Wymagane uprawnienia: &#x60;SubunitManage&#x60;.
     * @param subunitPermissionsGrantRequest  (optional)
     * @return ApiResponse<PermissionsOperationResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2PermissionsSubunitsGrantsPostWithHttpInfo(subunitPermissionsGrantRequest: SubunitPermissionsGrantRequest?) : ApiResponse<PermissionsOperationResponse?> {
        val localVariableConfig = apiV2PermissionsSubunitsGrantsPostRequestConfig(subunitPermissionsGrantRequest = subunitPermissionsGrantRequest)

        return request<SubunitPermissionsGrantRequest, PermissionsOperationResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2PermissionsSubunitsGrantsPost
     *
     * @param subunitPermissionsGrantRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2PermissionsSubunitsGrantsPostRequestConfig(subunitPermissionsGrantRequest: SubunitPermissionsGrantRequest?) : RequestConfig<SubunitPermissionsGrantRequest> {
        val localVariableBody = subunitPermissionsGrantRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/permissions/subunits/grants",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
