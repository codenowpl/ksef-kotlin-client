/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package pl.com.codenow.ksefclient.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import pl.com.codenow.ksefclient.models.AuthenticationChallengeResponse
import pl.com.codenow.ksefclient.models.AuthenticationInitResponse
import pl.com.codenow.ksefclient.models.AuthenticationOperationStatusResponse
import pl.com.codenow.ksefclient.models.AuthenticationTokenRefreshResponse
import pl.com.codenow.ksefclient.models.AuthenticationTokensResponse
import pl.com.codenow.ksefclient.models.ExceptionResponse
import pl.com.codenow.ksefclient.models.InitTokenAuthenticationRequest

import com.squareup.moshi.Json

import pl.com.codenow.ksefclient.infrastructure.ApiClient
import pl.com.codenow.ksefclient.infrastructure.ApiResponse
import pl.com.codenow.ksefclient.infrastructure.ClientException
import pl.com.codenow.ksefclient.infrastructure.ClientError
import pl.com.codenow.ksefclient.infrastructure.ServerException
import pl.com.codenow.ksefclient.infrastructure.ServerError
import pl.com.codenow.ksefclient.infrastructure.MultiValueMap
import pl.com.codenow.ksefclient.infrastructure.PartConfig
import pl.com.codenow.ksefclient.infrastructure.RequestConfig
import pl.com.codenow.ksefclient.infrastructure.RequestMethod
import pl.com.codenow.ksefclient.infrastructure.ResponseType
import pl.com.codenow.ksefclient.infrastructure.Success
import pl.com.codenow.ksefclient.infrastructure.toMultiValue

class UzyskiwanieDostpuKsefApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Inicjalizacja uwierzytelnienia
     * Generuje unikalny challenge wymagany w kolejnym kroku operacji uwierzytelnienia.
     * @return AuthenticationChallengeResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2AuthChallengePost() : AuthenticationChallengeResponse {
        val localVarResponse = apiV2AuthChallengePostWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthenticationChallengeResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Inicjalizacja uwierzytelnienia
     * Generuje unikalny challenge wymagany w kolejnym kroku operacji uwierzytelnienia.
     * @return ApiResponse<AuthenticationChallengeResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2AuthChallengePostWithHttpInfo() : ApiResponse<AuthenticationChallengeResponse?> {
        val localVariableConfig = apiV2AuthChallengePostRequestConfig()

        return request<Unit, AuthenticationChallengeResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2AuthChallengePost
     *
     * @return RequestConfig
     */
    fun apiV2AuthChallengePostRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/auth/challenge",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Uwierzytelnienie z wykorzystaniem tokena KSeF
     * Rozpoczyna operację uwierzytelniania z wykorzystaniem wcześniej wygenerowanego tokena KSeF.  Token KSeF wraz z timestampem ze wcześniej wygenerowanego challenge&#39;a (w formacie &#x60;&#x60;&#x60;token|timestamp&#x60;&#x60;&#x60;) powinien zostać zaszyfrowany dedykowanym do tego celu kluczem publicznym. - Timestamp powinien zostać przekazany jako **liczba milisekund od 1 stycznia 1970 roku (Unix timestamp)**. - Algorytm szyfrowania: **RSA-OAEP (z użyciem SHA-256 jako funkcji skrótu)**.
     * @param initTokenAuthenticationRequest  (optional)
     * @return AuthenticationInitResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2AuthKsefTokenPost(initTokenAuthenticationRequest: InitTokenAuthenticationRequest? = null) : AuthenticationInitResponse {
        val localVarResponse = apiV2AuthKsefTokenPostWithHttpInfo(initTokenAuthenticationRequest = initTokenAuthenticationRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthenticationInitResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Uwierzytelnienie z wykorzystaniem tokena KSeF
     * Rozpoczyna operację uwierzytelniania z wykorzystaniem wcześniej wygenerowanego tokena KSeF.  Token KSeF wraz z timestampem ze wcześniej wygenerowanego challenge&#39;a (w formacie &#x60;&#x60;&#x60;token|timestamp&#x60;&#x60;&#x60;) powinien zostać zaszyfrowany dedykowanym do tego celu kluczem publicznym. - Timestamp powinien zostać przekazany jako **liczba milisekund od 1 stycznia 1970 roku (Unix timestamp)**. - Algorytm szyfrowania: **RSA-OAEP (z użyciem SHA-256 jako funkcji skrótu)**.
     * @param initTokenAuthenticationRequest  (optional)
     * @return ApiResponse<AuthenticationInitResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2AuthKsefTokenPostWithHttpInfo(initTokenAuthenticationRequest: InitTokenAuthenticationRequest?) : ApiResponse<AuthenticationInitResponse?> {
        val localVariableConfig = apiV2AuthKsefTokenPostRequestConfig(initTokenAuthenticationRequest = initTokenAuthenticationRequest)

        return request<InitTokenAuthenticationRequest, AuthenticationInitResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2AuthKsefTokenPost
     *
     * @param initTokenAuthenticationRequest  (optional)
     * @return RequestConfig
     */
    fun apiV2AuthKsefTokenPostRequestConfig(initTokenAuthenticationRequest: InitTokenAuthenticationRequest?) : RequestConfig<InitTokenAuthenticationRequest> {
        val localVariableBody = initTokenAuthenticationRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/auth/ksef-token",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Pobranie statusu uwierzytelniania
     * Sprawdza bieżący status operacji uwierzytelniania dla podanego tokena.  Sposób uwierzytelnienia: &#x60;AuthenticationToken&#x60; otrzymany przy rozpoczęciu operacji uwierzytelniania.
     * @param referenceNumber Numer referencyjny tokena otrzymanego przy inicjalizacji operacji uwierzytelniania.
     * @return AuthenticationOperationStatusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2AuthReferenceNumberGet(referenceNumber: kotlin.String) : AuthenticationOperationStatusResponse {
        val localVarResponse = apiV2AuthReferenceNumberGetWithHttpInfo(referenceNumber = referenceNumber)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthenticationOperationStatusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie statusu uwierzytelniania
     * Sprawdza bieżący status operacji uwierzytelniania dla podanego tokena.  Sposób uwierzytelnienia: &#x60;AuthenticationToken&#x60; otrzymany przy rozpoczęciu operacji uwierzytelniania.
     * @param referenceNumber Numer referencyjny tokena otrzymanego przy inicjalizacji operacji uwierzytelniania.
     * @return ApiResponse<AuthenticationOperationStatusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2AuthReferenceNumberGetWithHttpInfo(referenceNumber: kotlin.String) : ApiResponse<AuthenticationOperationStatusResponse?> {
        val localVariableConfig = apiV2AuthReferenceNumberGetRequestConfig(referenceNumber = referenceNumber)

        return request<Unit, AuthenticationOperationStatusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2AuthReferenceNumberGet
     *
     * @param referenceNumber Numer referencyjny tokena otrzymanego przy inicjalizacji operacji uwierzytelniania.
     * @return RequestConfig
     */
    fun apiV2AuthReferenceNumberGetRequestConfig(referenceNumber: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/auth/{referenceNumber}".replace("{"+"referenceNumber"+"}", encodeURIComponent(referenceNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Pobranie tokenów dostępowych
     * Pobiera parę tokenów (access token i refresh token) wygenerowanych w ramach pozytywnie zakończonego procesu uwierzytelniania. **Tokeny można pobrać tylko raz.**  Sposób uwierzytelnienia: &#x60;AuthenticationToken&#x60; otrzymany przy rozpoczęciu operacji uwierzytelniania.
     * @return AuthenticationTokensResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2AuthTokenRedeemPost() : AuthenticationTokensResponse {
        val localVarResponse = apiV2AuthTokenRedeemPostWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthenticationTokensResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie tokenów dostępowych
     * Pobiera parę tokenów (access token i refresh token) wygenerowanych w ramach pozytywnie zakończonego procesu uwierzytelniania. **Tokeny można pobrać tylko raz.**  Sposób uwierzytelnienia: &#x60;AuthenticationToken&#x60; otrzymany przy rozpoczęciu operacji uwierzytelniania.
     * @return ApiResponse<AuthenticationTokensResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2AuthTokenRedeemPostWithHttpInfo() : ApiResponse<AuthenticationTokensResponse?> {
        val localVariableConfig = apiV2AuthTokenRedeemPostRequestConfig()

        return request<Unit, AuthenticationTokensResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2AuthTokenRedeemPost
     *
     * @return RequestConfig
     */
    fun apiV2AuthTokenRedeemPostRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/auth/token/redeem",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Odświeżenie tokena dostępowego
     * Generuje nowy token dostępu na podstawie ważnego refresh tokena.  Sposób uwierzytelnienia: &#x60;RefreshToken&#x60;.
     * @return AuthenticationTokenRefreshResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2AuthTokenRefreshPost() : AuthenticationTokenRefreshResponse {
        val localVarResponse = apiV2AuthTokenRefreshPostWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthenticationTokenRefreshResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Odświeżenie tokena dostępowego
     * Generuje nowy token dostępu na podstawie ważnego refresh tokena.  Sposób uwierzytelnienia: &#x60;RefreshToken&#x60;.
     * @return ApiResponse<AuthenticationTokenRefreshResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2AuthTokenRefreshPostWithHttpInfo() : ApiResponse<AuthenticationTokenRefreshResponse?> {
        val localVariableConfig = apiV2AuthTokenRefreshPostRequestConfig()

        return request<Unit, AuthenticationTokenRefreshResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2AuthTokenRefreshPost
     *
     * @return RequestConfig
     */
    fun apiV2AuthTokenRefreshPostRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/auth/token/refresh",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Uwierzytelnienie z wykorzystaniem podpisu XAdES
     * Rozpoczyna operację uwierzytelniania za pomocą dokumentu XML podpisanego podpisem elektronicznym XAdES.  &gt; Więcej informacji: &gt; - [Przygotowanie dokumentu XML](https://github.com/CIRFMF/ksef-docs/blob/main/uwierzytelnianie.md#1-przygotowanie-dokumentu-xml-authtokenrequest) &gt; - [Podpis dokumentu XML](https://github.com/CIRFMF/ksef-docs/blob/main/uwierzytelnianie.md#2-podpisanie-dokumentu-xades) &gt; - [Schemat XSD](/docs/v2/schemas/authv2.xsd)
     * @param body 
     * @param verifyCertificateChain Wymuszenie weryfikacji zaufania łańcucha certyfikatu wraz ze sprawdzeniem statusu certyfikatu (OCSP/CRL) na środowiskach które umożliwiają wykorzystanie samodzielnie wygenerowanych certyfikatów. (optional)
     * @return AuthenticationInitResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2AuthXadesSignaturePost(body: kotlin.String, verifyCertificateChain: kotlin.Boolean? = null) : AuthenticationInitResponse {
        val localVarResponse = apiV2AuthXadesSignaturePostWithHttpInfo(body = body, verifyCertificateChain = verifyCertificateChain)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthenticationInitResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Uwierzytelnienie z wykorzystaniem podpisu XAdES
     * Rozpoczyna operację uwierzytelniania za pomocą dokumentu XML podpisanego podpisem elektronicznym XAdES.  &gt; Więcej informacji: &gt; - [Przygotowanie dokumentu XML](https://github.com/CIRFMF/ksef-docs/blob/main/uwierzytelnianie.md#1-przygotowanie-dokumentu-xml-authtokenrequest) &gt; - [Podpis dokumentu XML](https://github.com/CIRFMF/ksef-docs/blob/main/uwierzytelnianie.md#2-podpisanie-dokumentu-xades) &gt; - [Schemat XSD](/docs/v2/schemas/authv2.xsd)
     * @param body 
     * @param verifyCertificateChain Wymuszenie weryfikacji zaufania łańcucha certyfikatu wraz ze sprawdzeniem statusu certyfikatu (OCSP/CRL) na środowiskach które umożliwiają wykorzystanie samodzielnie wygenerowanych certyfikatów. (optional)
     * @return ApiResponse<AuthenticationInitResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2AuthXadesSignaturePostWithHttpInfo(body: kotlin.String, verifyCertificateChain: kotlin.Boolean?) : ApiResponse<AuthenticationInitResponse?> {
        val localVariableConfig = apiV2AuthXadesSignaturePostRequestConfig(body = body, verifyCertificateChain = verifyCertificateChain)

        return request<kotlin.String, AuthenticationInitResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2AuthXadesSignaturePost
     *
     * @param body 
     * @param verifyCertificateChain Wymuszenie weryfikacji zaufania łańcucha certyfikatu wraz ze sprawdzeniem statusu certyfikatu (OCSP/CRL) na środowiskach które umożliwiają wykorzystanie samodzielnie wygenerowanych certyfikatów. (optional)
     * @return RequestConfig
     */
    fun apiV2AuthXadesSignaturePostRequestConfig(body: kotlin.String, verifyCertificateChain: kotlin.Boolean?) : RequestConfig<kotlin.String> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (verifyCertificateChain != null) {
                    put("verifyCertificateChain", listOf(verifyCertificateChain.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/auth/xades-signature",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
