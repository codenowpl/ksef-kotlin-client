/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package pl.com.codenow.ksefclient.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import pl.com.codenow.ksefclient.models.ExceptionResponse
import pl.com.codenow.ksefclient.models.OpenBatchSessionRequest
import pl.com.codenow.ksefclient.models.OpenBatchSessionResponse

import com.squareup.moshi.Json

import pl.com.codenow.ksefclient.infrastructure.ApiClient
import pl.com.codenow.ksefclient.infrastructure.ApiResponse
import pl.com.codenow.ksefclient.infrastructure.ClientException
import pl.com.codenow.ksefclient.infrastructure.ClientError
import pl.com.codenow.ksefclient.infrastructure.ServerException
import pl.com.codenow.ksefclient.infrastructure.ServerError
import pl.com.codenow.ksefclient.infrastructure.MultiValueMap
import pl.com.codenow.ksefclient.infrastructure.PartConfig
import pl.com.codenow.ksefclient.infrastructure.RequestConfig
import pl.com.codenow.ksefclient.infrastructure.RequestMethod
import pl.com.codenow.ksefclient.infrastructure.ResponseType
import pl.com.codenow.ksefclient.infrastructure.Success
import pl.com.codenow.ksefclient.infrastructure.toMultiValue

class WysykaWsadowaKsefApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Zamknięcie sesji wsadowej
     * Zamyka sesję wsadową, rozpoczyna procesowanie paczki faktur i generowanie UPO dla prawidłowych faktur oraz zbiorczego UPO dla sesji.  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2SessionsBatchReferenceNumberClosePost(referenceNumber: kotlin.String) : Unit {
        val localVarResponse = apiV2SessionsBatchReferenceNumberClosePostWithHttpInfo(referenceNumber = referenceNumber)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Zamknięcie sesji wsadowej
     * Zamyka sesję wsadową, rozpoczyna procesowanie paczki faktur i generowanie UPO dla prawidłowych faktur oraz zbiorczego UPO dla sesji.  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;.
     * @param referenceNumber Numer referencyjny sesji
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2SessionsBatchReferenceNumberClosePostWithHttpInfo(referenceNumber: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = apiV2SessionsBatchReferenceNumberClosePostRequestConfig(referenceNumber = referenceNumber)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2SessionsBatchReferenceNumberClosePost
     *
     * @param referenceNumber Numer referencyjny sesji
     * @return RequestConfig
     */
    fun apiV2SessionsBatchReferenceNumberClosePostRequestConfig(referenceNumber: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/sessions/batch/{referenceNumber}/close".replace("{"+"referenceNumber"+"}", encodeURIComponent(referenceNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Otwarcie sesji wsadowej
     * Otwiera sesję do wysyłki wsadowej faktur. Należy przekazać schemat wysyłanych faktur, informacje o paczce faktur oraz informacje o kluczu używanym do szyfrowania.  &gt; Więcej informacji: &gt; - [Przygotwanie paczki faktur](https://github.com/CIRFMF/ksef-docs/blob/main/sesja-wsadowa.md) &gt; - [Klucz publiczny Ministersta Finansów](/docs/v2/index.html#tag/Certyfikaty-klucza-publicznego)  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;.
     * @param openBatchSessionRequest  (optional)
     * @return OpenBatchSessionResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun batchOpen(openBatchSessionRequest: OpenBatchSessionRequest? = null) : OpenBatchSessionResponse {
        val localVarResponse = batchOpenWithHttpInfo(openBatchSessionRequest = openBatchSessionRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OpenBatchSessionResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Otwarcie sesji wsadowej
     * Otwiera sesję do wysyłki wsadowej faktur. Należy przekazać schemat wysyłanych faktur, informacje o paczce faktur oraz informacje o kluczu używanym do szyfrowania.  &gt; Więcej informacji: &gt; - [Przygotwanie paczki faktur](https://github.com/CIRFMF/ksef-docs/blob/main/sesja-wsadowa.md) &gt; - [Klucz publiczny Ministersta Finansów](/docs/v2/index.html#tag/Certyfikaty-klucza-publicznego)  Wymagane uprawnienia: &#x60;InvoiceWrite&#x60;.
     * @param openBatchSessionRequest  (optional)
     * @return ApiResponse<OpenBatchSessionResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun batchOpenWithHttpInfo(openBatchSessionRequest: OpenBatchSessionRequest?) : ApiResponse<OpenBatchSessionResponse?> {
        val localVariableConfig = batchOpenRequestConfig(openBatchSessionRequest = openBatchSessionRequest)

        return request<OpenBatchSessionRequest, OpenBatchSessionResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation batchOpen
     *
     * @param openBatchSessionRequest  (optional)
     * @return RequestConfig
     */
    fun batchOpenRequestConfig(openBatchSessionRequest: OpenBatchSessionRequest?) : RequestConfig<OpenBatchSessionRequest> {
        val localVariableBody = openBatchSessionRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/sessions/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
