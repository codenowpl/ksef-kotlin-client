/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package pl.com.codenow.ksefclient.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import pl.com.codenow.ksefclient.models.AuthenticationToken
import pl.com.codenow.ksefclient.models.AuthenticationTokenStatus
import pl.com.codenow.ksefclient.models.AuthorIdentifierType
import pl.com.codenow.ksefclient.models.ExceptionResponse
import pl.com.codenow.ksefclient.models.GenerateTokenRequest
import pl.com.codenow.ksefclient.models.GenerateTokenResponse
import pl.com.codenow.ksefclient.models.QueryTokensResponse

import com.squareup.moshi.Json

import pl.com.codenow.ksefclient.infrastructure.ApiClient
import pl.com.codenow.ksefclient.infrastructure.ApiResponse
import pl.com.codenow.ksefclient.infrastructure.ClientException
import pl.com.codenow.ksefclient.infrastructure.ClientError
import pl.com.codenow.ksefclient.infrastructure.ServerException
import pl.com.codenow.ksefclient.infrastructure.ServerError
import pl.com.codenow.ksefclient.infrastructure.MultiValueMap
import pl.com.codenow.ksefclient.infrastructure.PartConfig
import pl.com.codenow.ksefclient.infrastructure.RequestConfig
import pl.com.codenow.ksefclient.infrastructure.RequestMethod
import pl.com.codenow.ksefclient.infrastructure.ResponseType
import pl.com.codenow.ksefclient.infrastructure.Success
import pl.com.codenow.ksefclient.infrastructure.toMultiValue

class TokenyKSeFKsefApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Wygenerowanie nowego tokena
     * Zwraca token, który może być użyty do uwierzytelniania się w KSeF.  Token może być generowany tylko w kontekście NIP lub identyfikatora wewnętrznego. Jest zwracany tylko raz. Zaczyna być aktywny w momencie gdy jego status zmieni się na &#x60;Active&#x60;.
     * @param generateTokenRequest  (optional)
     * @return GenerateTokenResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tokenGenerate(generateTokenRequest: GenerateTokenRequest? = null) : GenerateTokenResponse {
        val localVarResponse = tokenGenerateWithHttpInfo(generateTokenRequest = generateTokenRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GenerateTokenResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Wygenerowanie nowego tokena
     * Zwraca token, który może być użyty do uwierzytelniania się w KSeF.  Token może być generowany tylko w kontekście NIP lub identyfikatora wewnętrznego. Jest zwracany tylko raz. Zaczyna być aktywny w momencie gdy jego status zmieni się na &#x60;Active&#x60;.
     * @param generateTokenRequest  (optional)
     * @return ApiResponse<GenerateTokenResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tokenGenerateWithHttpInfo(generateTokenRequest: GenerateTokenRequest?) : ApiResponse<GenerateTokenResponse?> {
        val localVariableConfig = tokenGenerateRequestConfig(generateTokenRequest = generateTokenRequest)

        return request<GenerateTokenRequest, GenerateTokenResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tokenGenerate
     *
     * @param generateTokenRequest  (optional)
     * @return RequestConfig
     */
    fun tokenGenerateRequestConfig(generateTokenRequest: GenerateTokenRequest?) : RequestConfig<GenerateTokenRequest> {
        val localVariableBody = generateTokenRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/tokens",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Pobranie listy wygenerowanych tokenów
     * 
     * @param status Status tokenów do zwrócenia. W przypadku braku parametru zwracane są wszystkie tokeny. Parametr można przekazać wielokrotnie. | Wartość | Opis | | --- | --- | | Pending | Token został utworzony ale jest jeszcze w trakcie aktywacji i nadawania uprawnień. Nie może być jeszcze wykorzystywany do uwierzytelniania. | | Active | Token jest aktywny i może być wykorzystywany do uwierzytelniania. | | Revoking | Token jest w trakcie unieważniania. Nie może już być wykorzystywany do uwierzytelniania. | | Revoked | Token został unieważniony i nie może być wykorzystywany do uwierzytelniania. | | Failed | Nie udało się aktywować tokena. Należy wygenerować nowy token, obecny nie może być wykorzystywany do uwierzytelniania. |  (optional)
     * @param description Umożliwia filtrowanie tokenów po opisie. Wartość parametru jest wyszukiwana w opisie tokena (operacja nie rozróżnia wielkości liter). Należy podać co najmniej 3 znaki. (optional)
     * @param authorIdentifier Umożliwia filtrowanie tokenów po ich twórcy. Wartość parametru jest wyszukiwana w identyfikatorze (operacja nie rozróżnia wielkości liter). Należy podać co najmniej 3 znaki. (optional)
     * @param authorIdentifierType Umożliwia filtrowanie tokenów po ich twórcy. Wartość parametru określa typ identyfikatora w którym będzie wyszukiwany ciąg znaków przekazany w parametrze &#x60;authorIdentifier&#x60;. | Wartość | Opis | | --- | --- | | Nip | NIP. | | Pesel | PESEL. | | Fingerprint | Odcisk palca certyfikatu. |  (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param xContinuationToken Token służący do pobrania kolejnej strony wyników. (optional)
     * @return QueryTokensResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tokenQuery(status: kotlin.collections.List<AuthenticationTokenStatus>? = null, description: kotlin.String? = null, authorIdentifier: kotlin.String? = null, authorIdentifierType: AuthorIdentifierType? = null, pageSize: kotlin.Int? = null, xContinuationToken: kotlin.String? = null) : QueryTokensResponse {
        val localVarResponse = tokenQueryWithHttpInfo(status = status, description = description, authorIdentifier = authorIdentifier, authorIdentifierType = authorIdentifierType, pageSize = pageSize, xContinuationToken = xContinuationToken)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QueryTokensResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie listy wygenerowanych tokenów
     * 
     * @param status Status tokenów do zwrócenia. W przypadku braku parametru zwracane są wszystkie tokeny. Parametr można przekazać wielokrotnie. | Wartość | Opis | | --- | --- | | Pending | Token został utworzony ale jest jeszcze w trakcie aktywacji i nadawania uprawnień. Nie może być jeszcze wykorzystywany do uwierzytelniania. | | Active | Token jest aktywny i może być wykorzystywany do uwierzytelniania. | | Revoking | Token jest w trakcie unieważniania. Nie może już być wykorzystywany do uwierzytelniania. | | Revoked | Token został unieważniony i nie może być wykorzystywany do uwierzytelniania. | | Failed | Nie udało się aktywować tokena. Należy wygenerować nowy token, obecny nie może być wykorzystywany do uwierzytelniania. |  (optional)
     * @param description Umożliwia filtrowanie tokenów po opisie. Wartość parametru jest wyszukiwana w opisie tokena (operacja nie rozróżnia wielkości liter). Należy podać co najmniej 3 znaki. (optional)
     * @param authorIdentifier Umożliwia filtrowanie tokenów po ich twórcy. Wartość parametru jest wyszukiwana w identyfikatorze (operacja nie rozróżnia wielkości liter). Należy podać co najmniej 3 znaki. (optional)
     * @param authorIdentifierType Umożliwia filtrowanie tokenów po ich twórcy. Wartość parametru określa typ identyfikatora w którym będzie wyszukiwany ciąg znaków przekazany w parametrze &#x60;authorIdentifier&#x60;. | Wartość | Opis | | --- | --- | | Nip | NIP. | | Pesel | PESEL. | | Fingerprint | Odcisk palca certyfikatu. |  (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param xContinuationToken Token służący do pobrania kolejnej strony wyników. (optional)
     * @return ApiResponse<QueryTokensResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tokenQueryWithHttpInfo(status: kotlin.collections.List<AuthenticationTokenStatus>?, description: kotlin.String?, authorIdentifier: kotlin.String?, authorIdentifierType: AuthorIdentifierType?, pageSize: kotlin.Int?, xContinuationToken: kotlin.String?) : ApiResponse<QueryTokensResponse?> {
        val localVariableConfig = tokenQueryRequestConfig(status = status, description = description, authorIdentifier = authorIdentifier, authorIdentifierType = authorIdentifierType, pageSize = pageSize, xContinuationToken = xContinuationToken)

        return request<Unit, QueryTokensResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tokenQuery
     *
     * @param status Status tokenów do zwrócenia. W przypadku braku parametru zwracane są wszystkie tokeny. Parametr można przekazać wielokrotnie. | Wartość | Opis | | --- | --- | | Pending | Token został utworzony ale jest jeszcze w trakcie aktywacji i nadawania uprawnień. Nie może być jeszcze wykorzystywany do uwierzytelniania. | | Active | Token jest aktywny i może być wykorzystywany do uwierzytelniania. | | Revoking | Token jest w trakcie unieważniania. Nie może już być wykorzystywany do uwierzytelniania. | | Revoked | Token został unieważniony i nie może być wykorzystywany do uwierzytelniania. | | Failed | Nie udało się aktywować tokena. Należy wygenerować nowy token, obecny nie może być wykorzystywany do uwierzytelniania. |  (optional)
     * @param description Umożliwia filtrowanie tokenów po opisie. Wartość parametru jest wyszukiwana w opisie tokena (operacja nie rozróżnia wielkości liter). Należy podać co najmniej 3 znaki. (optional)
     * @param authorIdentifier Umożliwia filtrowanie tokenów po ich twórcy. Wartość parametru jest wyszukiwana w identyfikatorze (operacja nie rozróżnia wielkości liter). Należy podać co najmniej 3 znaki. (optional)
     * @param authorIdentifierType Umożliwia filtrowanie tokenów po ich twórcy. Wartość parametru określa typ identyfikatora w którym będzie wyszukiwany ciąg znaków przekazany w parametrze &#x60;authorIdentifier&#x60;. | Wartość | Opis | | --- | --- | | Nip | NIP. | | Pesel | PESEL. | | Fingerprint | Odcisk palca certyfikatu. |  (optional)
     * @param pageSize Rozmiar strony wyników. (optional)
     * @param xContinuationToken Token służący do pobrania kolejnej strony wyników. (optional)
     * @return RequestConfig
     */
    fun tokenQueryRequestConfig(status: kotlin.collections.List<AuthenticationTokenStatus>?, description: kotlin.String?, authorIdentifier: kotlin.String?, authorIdentifierType: AuthorIdentifierType?, pageSize: kotlin.Int?, xContinuationToken: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (status != null) {
                    put("status", toMultiValue(status.toList(), "multi"))
                }
                if (description != null) {
                    put("description", listOf(description.toString()))
                }
                if (authorIdentifier != null) {
                    put("authorIdentifier", listOf(authorIdentifier.toString()))
                }
                if (authorIdentifierType != null) {
                    put("authorIdentifierType", listOf(authorIdentifierType.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xContinuationToken?.apply { localVariableHeaders["x-continuation-token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/tokens",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Unieważnienie tokena
     * Unieważniony token nie pozwoli już na uwierzytelnienie się za jego pomocą. Unieważnienie nie może zostać cofnięte.
     * @param referenceNumber Numer referencyjny tokena do unieważeniania.
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tokenRevoke(referenceNumber: kotlin.String) : Unit {
        val localVarResponse = tokenRevokeWithHttpInfo(referenceNumber = referenceNumber)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Unieważnienie tokena
     * Unieważniony token nie pozwoli już na uwierzytelnienie się za jego pomocą. Unieważnienie nie może zostać cofnięte.
     * @param referenceNumber Numer referencyjny tokena do unieważeniania.
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun tokenRevokeWithHttpInfo(referenceNumber: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = tokenRevokeRequestConfig(referenceNumber = referenceNumber)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tokenRevoke
     *
     * @param referenceNumber Numer referencyjny tokena do unieważeniania.
     * @return RequestConfig
     */
    fun tokenRevokeRequestConfig(referenceNumber: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/tokens/{referenceNumber}".replace("{"+"referenceNumber"+"}", encodeURIComponent(referenceNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Pobranie statusu tokena
     * 
     * @param referenceNumber Numer referencyjny tokena.
     * @return AuthenticationToken
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tokenStatus(referenceNumber: kotlin.String) : AuthenticationToken {
        val localVarResponse = tokenStatusWithHttpInfo(referenceNumber = referenceNumber)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthenticationToken
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Pobranie statusu tokena
     * 
     * @param referenceNumber Numer referencyjny tokena.
     * @return ApiResponse<AuthenticationToken?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tokenStatusWithHttpInfo(referenceNumber: kotlin.String) : ApiResponse<AuthenticationToken?> {
        val localVariableConfig = tokenStatusRequestConfig(referenceNumber = referenceNumber)

        return request<Unit, AuthenticationToken>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tokenStatus
     *
     * @param referenceNumber Numer referencyjny tokena.
     * @return RequestConfig
     */
    fun tokenStatusRequestConfig(referenceNumber: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/tokens/{referenceNumber}".replace("{"+"referenceNumber"+"}", encodeURIComponent(referenceNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
