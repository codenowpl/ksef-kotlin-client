/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package pl.com.codenow.ksefclient.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import pl.com.codenow.ksefclient.models.InvoiceQueryFilters
import pl.com.codenow.ksefclient.models.CurrencyCode
import pl.com.codenow.ksefclient.models.InvoiceQueryAmount
import pl.com.codenow.ksefclient.models.InvoiceQueryBuyer
import pl.com.codenow.ksefclient.models.InvoiceQueryDateRange
import pl.com.codenow.ksefclient.models.InvoiceQueryFormType
import pl.com.codenow.ksefclient.models.InvoiceQuerySeller
import pl.com.codenow.ksefclient.models.InvoiceQuerySubjectType
import pl.com.codenow.ksefclient.models.InvoiceType
import pl.com.codenow.ksefclient.models.InvoicingMode

class InvoiceQueryFiltersTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of InvoiceQueryFilters
        //val modelInstance = InvoiceQueryFilters()

        // to test the property `subjectType` - Typ podmiotu, którego dotyczą kryteria filtrowania metadanych faktur. Określa kontekst, w jakim przeszukiwane są dane. | Wartość | Opis | | --- | --- | | Subject1 | Podmiot 1 | | Subject2 | Podmiot 2 | | Subject3 | Podmiot 3 | | SubjectAuthorized | Podmiot upoważniony | 
        should("test subjectType") {
            // uncomment below to test the property
            //modelInstance.subjectType shouldBe ("TODO")
        }

        // to test the property `dateRange` - Typ i zakres dat, według którego mają być filtrowane faktury. Dozwolony maksymalny okres wynosi 2 lata.
        should("test dateRange") {
            // uncomment below to test the property
            //modelInstance.dateRange shouldBe ("TODO")
        }

        // to test the property `ksefNumber` - Numer KSeF faktury.
        should("test ksefNumber") {
            // uncomment below to test the property
            //modelInstance.ksefNumber shouldBe ("TODO")
        }

        // to test the property `invoiceNumber` - Numer faktury nadany przez wystawcę.
        should("test invoiceNumber") {
            // uncomment below to test the property
            //modelInstance.invoiceNumber shouldBe ("TODO")
        }

        // to test the property `amount` - Filtr kwotowy – brutto, netto lub VAT (z wartością).
        should("test amount") {
            // uncomment below to test the property
            //modelInstance.amount shouldBe ("TODO")
        }

        // to test the property `seller` - Dane sprzedawcy.
        should("test seller") {
            // uncomment below to test the property
            //modelInstance.seller shouldBe ("TODO")
        }

        // to test the property `buyer` - Dane nabywcy.
        should("test buyer") {
            // uncomment below to test the property
            //modelInstance.buyer shouldBe ("TODO")
        }

        // to test the property `currencyCodes` - Kody walut.
        should("test currencyCodes") {
            // uncomment below to test the property
            //modelInstance.currencyCodes shouldBe ("TODO")
        }

        // to test the property `invoicingMode` - Tryb wystawienia faktury: online lub offline.
        should("test invoicingMode") {
            // uncomment below to test the property
            //modelInstance.invoicingMode shouldBe ("TODO")
        }

        // to test the property `isSelfInvoicing` - Czy faktura została wystawiona w trybie samofakturowania.
        should("test isSelfInvoicing") {
            // uncomment below to test the property
            //modelInstance.isSelfInvoicing shouldBe ("TODO")
        }

        // to test the property `formType` - Typ dokumentu. | Wartość | Opis | | --- | --- | | FA | Faktura VAT | | PEF | Faktura PEF | | RR | Faktura RR | 
        should("test formType") {
            // uncomment below to test the property
            //modelInstance.formType shouldBe ("TODO")
        }

        // to test the property `invoiceTypes` - Rodzaje faktur. | Wartość | Opis | | --- | --- | | Vat | (FA) Podstawowa | | Zal | (FA) Zaliczkowa | | Kor | (FA) Korygująca | | Roz | (FA) Rozliczeniowa | | Upr | (FA) Uproszczona | | KorZal | (FA) Korygująca fakturę zaliczkową | | KorRoz | (FA) Korygująca fakturę rozliczeniową | | VatPef | (PEF) Podstawowowa | | VatPefSp | (PEF) Specjalizowana | | KorPef | (PEF) Korygująca | | VatRr | (RR) Podstawowa | | KorVatRr | (RR) Korygująca | 
        should("test invoiceTypes") {
            // uncomment below to test the property
            //modelInstance.invoiceTypes shouldBe ("TODO")
        }

        // to test the property `hasAttachment` - Czy faktura ma załącznik.
        should("test hasAttachment") {
            // uncomment below to test the property
            //modelInstance.hasAttachment shouldBe ("TODO")
        }

    }
}
