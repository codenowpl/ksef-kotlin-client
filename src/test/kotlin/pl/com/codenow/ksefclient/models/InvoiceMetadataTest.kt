/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package pl.com.codenow.ksefclient.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import pl.com.codenow.ksefclient.models.InvoiceMetadata
import pl.com.codenow.ksefclient.models.FormCode
import pl.com.codenow.ksefclient.models.InvoiceMetadataAuthorizedSubject
import pl.com.codenow.ksefclient.models.InvoiceMetadataBuyer
import pl.com.codenow.ksefclient.models.InvoiceMetadataSeller
import pl.com.codenow.ksefclient.models.InvoiceMetadataThirdSubject
import pl.com.codenow.ksefclient.models.InvoiceType
import pl.com.codenow.ksefclient.models.InvoicingMode

class InvoiceMetadataTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of InvoiceMetadata
        //val modelInstance = InvoiceMetadata()

        // to test the property `ksefNumber` - Numer KSeF faktury.
        should("test ksefNumber") {
            // uncomment below to test the property
            //modelInstance.ksefNumber shouldBe ("TODO")
        }

        // to test the property `invoiceNumber` - Numer faktury nadany przez wystawcę.
        should("test invoiceNumber") {
            // uncomment below to test the property
            //modelInstance.invoiceNumber shouldBe ("TODO")
        }

        // to test the property `issueDate` - Data wystawienia faktury.
        should("test issueDate") {
            // uncomment below to test the property
            //modelInstance.issueDate shouldBe ("TODO")
        }

        // to test the property `invoicingDate` - Data przyjęcia faktury w systemie KSeF (do dalszego przetwarzania).
        should("test invoicingDate") {
            // uncomment below to test the property
            //modelInstance.invoicingDate shouldBe ("TODO")
        }

        // to test the property `acquisitionDate` - Data nadania numeru KSeF.
        should("test acquisitionDate") {
            // uncomment below to test the property
            //modelInstance.acquisitionDate shouldBe ("TODO")
        }

        // to test the property `permanentStorageDate` - Data trwałego zapisu faktury w repozytorium systemu KSeF.
        should("test permanentStorageDate") {
            // uncomment below to test the property
            //modelInstance.permanentStorageDate shouldBe ("TODO")
        }

        // to test the property `seller` - Dane identyfikujące sprzedawcę.
        should("test seller") {
            // uncomment below to test the property
            //modelInstance.seller shouldBe ("TODO")
        }

        // to test the property `buyer` - Dane identyfikujące nabywcę.
        should("test buyer") {
            // uncomment below to test the property
            //modelInstance.buyer shouldBe ("TODO")
        }

        // to test the property `netAmount` - Łączna kwota netto.
        should("test netAmount") {
            // uncomment below to test the property
            //modelInstance.netAmount shouldBe ("TODO")
        }

        // to test the property `grossAmount` - Łączna kwota brutto.
        should("test grossAmount") {
            // uncomment below to test the property
            //modelInstance.grossAmount shouldBe ("TODO")
        }

        // to test the property `vatAmount` - Łączna kwota VAT.
        should("test vatAmount") {
            // uncomment below to test the property
            //modelInstance.vatAmount shouldBe ("TODO")
        }

        // to test the property `currency` - Kod waluty.
        should("test currency") {
            // uncomment below to test the property
            //modelInstance.currency shouldBe ("TODO")
        }

        // to test the property `invoicingMode` - Tryb fakturowania (online/offline).
        should("test invoicingMode") {
            // uncomment below to test the property
            //modelInstance.invoicingMode shouldBe ("TODO")
        }

        // to test the property `invoiceType` - Rodzaj faktury. | Wartość | Opis | | --- | --- | | Vat | (FA) Podstawowa | | Zal | (FA) Zaliczkowa | | Kor | (FA) Korygująca | | Roz | (FA) Rozliczeniowa | | Upr | (FA) Uproszczona | | KorZal | (FA) Korygująca fakturę zaliczkową | | KorRoz | (FA) Korygująca fakturę rozliczeniową | | VatPef | (PEF) Podstawowowa | | VatPefSp | (PEF) Specjalizowana | | KorPef | (PEF) Korygująca | | VatRr | (RR) Podstawowa | | KorVatRr | (RR) Korygująca | 
        should("test invoiceType") {
            // uncomment below to test the property
            //modelInstance.invoiceType shouldBe ("TODO")
        }

        // to test the property `formCode` - Struktura dokumentu faktury.  Obsługiwane schematy: | SystemCode | SchemaVersion | Value | | --- | --- | --- | | FA (2) | 1-0E | FA | | FA (3) | 1-0E | FA | | FA_PEF (3) | 2-1 | FA_PEF | | FA_KOR_PEF (3) | 2-1 | FA_PEF | 
        should("test formCode") {
            // uncomment below to test the property
            //modelInstance.formCode shouldBe ("TODO")
        }

        // to test the property `isSelfInvoicing` - Czy faktura została wystawiona w trybie samofakturowania.
        should("test isSelfInvoicing") {
            // uncomment below to test the property
            //modelInstance.isSelfInvoicing shouldBe ("TODO")
        }

        // to test the property `hasAttachment` - Czy faktura posiada załącznik.
        should("test hasAttachment") {
            // uncomment below to test the property
            //modelInstance.hasAttachment shouldBe ("TODO")
        }

        // to test the property `invoiceHash` - Skrót SHA256 faktury.
        should("test invoiceHash") {
            // uncomment below to test the property
            //modelInstance.invoiceHash shouldBe ("TODO")
        }

        // to test the property `hashOfCorrectedInvoice` - Skrót SHA256 korygowanej faktury.
        should("test hashOfCorrectedInvoice") {
            // uncomment below to test the property
            //modelInstance.hashOfCorrectedInvoice shouldBe ("TODO")
        }

        // to test the property `thirdSubjects` - Lista podmiotów trzecich.
        should("test thirdSubjects") {
            // uncomment below to test the property
            //modelInstance.thirdSubjects shouldBe ("TODO")
        }

        // to test the property `authorizedSubject` - Podmiot upoważniony.
        should("test authorizedSubject") {
            // uncomment below to test the property
            //modelInstance.authorizedSubject shouldBe ("TODO")
        }

    }
}
