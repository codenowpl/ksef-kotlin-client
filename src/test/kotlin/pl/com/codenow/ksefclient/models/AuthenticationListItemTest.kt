/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package pl.com.codenow.ksefclient.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import pl.com.codenow.ksefclient.models.AuthenticationListItem
import pl.com.codenow.ksefclient.models.AuthenticationMethod
import pl.com.codenow.ksefclient.models.StatusInfo

class AuthenticationListItemTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of AuthenticationListItem
        //val modelInstance = AuthenticationListItem()

        // to test the property `startDate` - Data rozpoczęcia operacji uwierzytelnienia.
        should("test startDate") {
            // uncomment below to test the property
            //modelInstance.startDate shouldBe ("TODO")
        }

        // to test the property `authenticationMethod` - Użyta metoda uwierzytelnienia. | Wartość | Opis | | --- | --- | | Token | Token KSeF. | | TrustedProfile | Profil Zaufany. | | InternalCertificate | Certyfikat KSeF. | | QualifiedSignature | Podpis kwalifikowany. | | QualifiedSeal | Pieczęć kwalifikowana. | | PersonalSignature | Podpis osobisty. | | PeppolSignature | Podpis dostawcy uslug Peppol. | 
        should("test authenticationMethod") {
            // uncomment below to test the property
            //modelInstance.authenticationMethod shouldBe ("TODO")
        }

        // to test the property `status` - Informacje o aktualnym statusie. | Code | Description | Details | | --- | --- | --- | | 100 | Uwierzytelnianie w toku | - | | 200 | Uwierzytelnianie zakończone sukcesem | - | | 415 | Uwierzytelnianie zakończone niepowodzeniem | Brak przypisanych uprawnień | | 425 | Uwierzytelnienie unieważnione  | Uwierzytelnienie i powiązane refresh tokeny zostały unieważnione przez użytkownika | | 450 | Uwierzytelnianie zakończone niepowodzeniem z powodu błędnego tokenu | Nieprawidłowy token | | 450 | Uwierzytelnianie zakończone niepowodzeniem z powodu błędnego tokenu | Nieprawidłowy czas tokena | | 450 | Uwierzytelnianie zakończone niepowodzeniem z powodu błędnego tokenu | Token unieważniony | | 450 | Uwierzytelnianie zakończone niepowodzeniem z powodu błędnego tokenu | Token nieaktywny | | 460 | Uwierzytelnianie zakończone niepowodzeniem z powodu błędu certyfikatu | Nieważny certyfikat | | 460 | Uwierzytelnianie zakończone niepowodzeniem z powodu błędu certyfikatu | Błąd weryfikacji łańcucha certyfikatów | | 460 | Uwierzytelnianie zakończone niepowodzeniem z powodu błędu certyfikatu | Niezaufany łańcuch certyfikatów | | 460 | Uwierzytelnianie zakończone niepowodzeniem z powodu błędu certyfikatu | Certyfikat odwołany | | 460 | Uwierzytelnianie zakończone niepowodzeniem z powodu błędu certyfikatu | Niepoprawny certyfikat | | 500 | Nieznany błąd | - |
        should("test status") {
            // uncomment below to test the property
            //modelInstance.status shouldBe ("TODO")
        }

        // to test the property `referenceNumber` - Numer referencyjny operacji uwierzytelnienia.
        should("test referenceNumber") {
            // uncomment below to test the property
            //modelInstance.referenceNumber shouldBe ("TODO")
        }

        // to test the property `isTokenRedeemed` - Czy został już wydany refresh token powiązany z danym uwierzytelnieniem.
        should("test isTokenRedeemed") {
            // uncomment below to test the property
            //modelInstance.isTokenRedeemed shouldBe ("TODO")
        }

        // to test the property `lastTokenRefreshDate` - Data ostatniego odświeżenia tokena.
        should("test lastTokenRefreshDate") {
            // uncomment below to test the property
            //modelInstance.lastTokenRefreshDate shouldBe ("TODO")
        }

        // to test the property `refreshTokenValidUntil` - Termin ważności refresh tokena (o ile nie zostanie wcześniej unieważniony).
        should("test refreshTokenValidUntil") {
            // uncomment below to test the property
            //modelInstance.refreshTokenValidUntil shouldBe ("TODO")
        }

        // to test the property `isCurrent` - Czy sesja jest powiązana z aktualnie używanym tokenem.
        should("test isCurrent") {
            // uncomment below to test the property
            //modelInstance.isCurrent shouldBe ("TODO")
        }

    }
}
